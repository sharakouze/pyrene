//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.Services.ServiceModel;
using Tmpi.Pyrene.Services.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;

namespace Tmpi.Pyrene.Services.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenPersonne"/>.
	/// </summary>
	public partial class GenPersonneService : Service
	{
		/// <summary>
		/// 
		/// </summary>
		protected bool GenPersonneCodPersonneEstUnique(GenPersonne model)
		{
            var q = Db.From<GenPersonne>().Where(x => x.CodPersonne == model.CodPersonne);
			if (model.ClePersonne != 0)
			{
				q.Where(x => x.ClePersonne != model.ClePersonne);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonne"/> ajoutée.</returns>
		public GenPersonne Post(GenPersonne request)
		{
			var id = Db.Insert(request, selectIdentity: true);
			request.ClePersonne = (int)id;

			return request;
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Put(GenPersonne request)
		{
			int count = Db.Update(request);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenPersonne), request.ClePersonne));
			}
		}

		/// <summary>
		/// 
		/// </summary>
		protected bool GenPersonneProfilClePersonneCleServiceEstUnique(GenPersonneProfil model)
		{
            var q = Db.From<GenPersonneProfil>().Where(x => x.ClePersonne == model.ClePersonne).Where(x => x.CleService == model.CleService);
			if (model.CleProfil != 0)
			{
				q.Where(x => x.CleProfil != model.CleProfil);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// 
		/// </summary>
		protected bool GenPersonneProfilCodProfilClePersonneEstUnique(GenPersonneProfil model)
		{
            var q = Db.From<GenPersonneProfil>().Where(x => x.CodProfil == model.CodProfil).Where(x => x.ClePersonne == model.ClePersonne);
			if (model.CleProfil != 0)
			{
				q.Where(x => x.CleProfil != model.CleProfil);
			}

			return Db.Exists(q);
		}

	}
}
