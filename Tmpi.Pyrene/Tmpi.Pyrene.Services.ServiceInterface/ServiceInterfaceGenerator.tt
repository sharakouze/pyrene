<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#
	/***** TODO *****
	- Trace des fields introuvables dans Get et Patch
	- Unicité
	****************/

	/*********************/
	/** CUSTOM SETTINGS **/
	/*********************/

	// Namespace des fichiers générés. Si vide DefaultNamespace du projet/répertoire courant.
	string Namespace = "";

	// Limite le traitement aux classes dans ce projet.
	string SourceProject = "Tmpi.Pyrene.Services.ServiceModel";
	
	// true pour générer des classes partial.
	bool MakeClassesPartial = true;

	// true pour générer chaque classe dans un fichier séparé.
	bool SplitIntoMultipleFiles = true;
    
    // true pour créer les validors de la ValidationFeature
    bool CreateValidators = true;

    // true pour rajouter .WithMessage() pour chaque RuleFor
    bool ValidatorsWithMessage = false;

	// RegExp pour filtrer globalement les classes traitées, null pour tout inclure et/ou ne rien exclure.
	Regex ClassFilterInclude = null;
	Regex ClassFilterExclude = null;

#>
<#
	// namespace
	string fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		fileNamespace = VisualStudioHelper.CurrentFileNamespace;
	}

	// get a reference to the project of this t4 template
	Project srcProject = VisualStudioHelper.CurrentProject;
	if (!string.IsNullOrWhiteSpace(SourceProject))
    {
		srcProject = VisualStudioHelper.GetProject(SourceProject);
    }

	string sourceNamespace = VisualStudioHelper.GetDefaultNamespace(srcProject);

	Manager manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	manager.EndBlock(); // end header

	var dicRequest = new Dictionary<string, List<RequestItem>>();

    // get all class items from the code model
    List<CodeClass> allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(srcProject.CodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
		.OfType<CodeClass>()
		.OrderBy(c => c.Name)
		.ToList();

    foreach (CodeClass codeClass in allClasses)
    {
		bool included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		bool excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
        {
			continue;
        }

		string entityName = null;
        if (codeClass.Name.StartsWith("Get"))
        {
			entityName = codeClass.Name.Substring(3);
        }
        else if (codeClass.Name.StartsWith("Delete"))
        {
 			entityName = codeClass.Name.Substring(6);
        }
        else if (codeClass.Name.StartsWith("Patch"))
        {
            entityName = codeClass.Name.Substring(5);
        }
        else if (codeClass.Name.StartsWith("Search"))
        {
			entityName = codeClass.Name.Substring(6);
        }
        else if (codeClass.Name.StartsWith("Find"))
        {
        //    entityName = codeClass.Name.Substring(4);
        }
		else
		{
			entityName = codeClass.Name;
		}

		string codeClassName = codeClass.Name;

		List<CodeAttribute> lstRouteAttrs = VisualStudioHelper.CodeModel.GetAllClassAttributes(codeClass)
			.Where(attr => attr.FullName == "ServiceStack.RouteAttribute")
			.ToList();
		if (lstRouteAttrs.Any() && !string.IsNullOrEmpty(entityName))
        {
			List<RequestItem> items = dicRequest.Where(kvp => entityName.StartsWith(kvp.Key)).Select(kvp => kvp.Value).SingleOrDefault();
			if (items == null)
			{
				items = new List<RequestItem>();
				dicRequest.Add(entityName, items);
			}

			RequestItem item = new RequestItem();
			item.RequestClass = codeClass;
			foreach (CodeAttribute routeAttr in lstRouteAttrs)
			{
				item.LstRouteParts.Add(GetRouteParts(routeAttr));
			}
			items.Add(item);
        }
    } // end foreach

	foreach (var kvp in dicRequest)
	{
		string serviceClassName = kvp.Key + "Service";
		manager.StartNewFile(serviceClassName + ".generated.cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack;
using ServiceStack.OrmLite;
using <#= sourceNamespace #>;
using <#= sourceNamespace #>.Types;
using Tmpi.Pyrene.Infrastructure;

namespace <#= fileNamespace #>
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="<#= kvp.Key #>"/>.
	/// </summary>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= serviceClassName #> : Service
	{
<#
		foreach (RequestItem item in kvp.Value)
        {
			CodeProperty pkProp = GetPrimaryKeyProperty(item.RequestClass);
			if (pkProp != null)
            {
			List<CodeProperty[]> lstIdxProps = GetUniqueProperties(item.RequestClass);
			foreach (CodeProperty[] lstProps in lstIdxProps)
            {
				List<string> whereExpr = new List<string>();
				whereExpr.AddRange(lstProps.Select(p => string.Format(".Where(x => x.{0} == model.{0})", p.Name)));
#>
		/// <summary>
		/// 
		/// </summary>
		protected bool <#= item.RequestClass.Name #><#= string.Join("", lstProps.Select(p => p.Name)) #>EstUnique(<#= item.RequestClass.Name #> model)
		{
            var q = Db.From<<#= item.RequestClass.Name #>>()<#= string.Join("", whereExpr) #>;
			if (model.<#= pkProp.Name #> != 0)
			{
				q.Where(x => x.<#= pkProp.Name #> != model.<#= pkProp.Name #>);
			}

			return Db.Exists(q);
		}

<#
            }
            }

			if (item.RequestClass.Name.StartsWith("Autocomplete"))
            {
				var entityName = item.RequestClass.Name.Substring(12);
#>
		/// <summary>
		/// 
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(<#= item.RequestClass.Name #> request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<<#= entityName #>>().Where(x => x.LibObjet.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

<#
            }
			else if (item.RequestClass.Name.StartsWith("Get"))
            {
				var entityName = item.RequestClass.Name.Substring(3);

#>
		/// <summary>
		/// Retourne la ressource <see cref="<#= entityName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="<#= entityName #>"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public <#= entityName #> Get(<#= item.RequestClass.Name #> request)
		{
            if (!request.Fields.IsNullOrEmpty())
            {
                var errFields = ModelDefinitionHelper.GetUndefinedFields<<#= entityName #>>(request.Fields);
                if (errFields.Any())
                {
                    string str = string.Join(", ", errFields.Select(f => "'" + f + "'"));
                    throw new ArgumentException(
                        string.Format(ServicesErrorMessages.ResourceFieldsNotFound, nameof(<#= entityName #>), str));
                }
            }

            var q = Db.From<<#= entityName #>>().Where(x => x.<#= pkProp.Name #> == request.<#= pkProp.Name #>).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(<#= entityName #>), request.<#= pkProp.Name #>));
			}

			return entity;
		}

<#
            }
			else if (item.RequestClass.Name.StartsWith("Delete"))
            {
				/****************/
				/** DELETEBYID **/
				/****************/

				var entityName = item.RequestClass.Name.Substring(6);
#>
		/// <summary>
		/// Supprime la ressource <see cref="<#= entityName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Delete(<#= item.RequestClass.Name #> request)
		{
			int count = Db.DeleteById<<#= entityName #>>(request.<#= pkProp.Name #>);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(<#= entityName #>), request.<#= pkProp.Name #>));
			}
		}

<#
            }
			else if (item.RequestClass.Name.StartsWith("Patch"))
            {
				var entityName = item.RequestClass.Name.Substring(5);
#>
		/// <summary>
		/// Met à jour la ressource <see cref="<#= entityName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Patch(<#= item.RequestClass.Name #> request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            var errFields = ModelDefinitionHelper.GetUndefinedFields<<#= entityName #>>(patchDic.Keys);
            if (errFields.Any())
            {
                string str = string.Join(", ", errFields.Select(f => "'" + f + "'"));
                throw new ArgumentException(
                    string.Format(ServicesErrorMessages.ResourceFieldsNotFound, nameof(<#= entityName #>), str));
            }

			var entity = new <#= entityName #>();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<<#= entityName #>>().Where(x => x.<#= pkProp.Name #> == request.<#= pkProp.Name #>).Update(patchDic.Keys);

			int count = Db.UpdateOnly(entity, q);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(<#= entityName #>), request.<#= pkProp.Name #>));
			}
		}

<#
			}
			else if (item.RequestClass.Name.StartsWith("Find"))
            {
				var entityName = item.RequestClass.Name.Substring(4);
#>
		/// <summary>
		/// Met à jour la ressource <see cref="<#= entityName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public List<<#= entityName #>> Get(<#= item.RequestClass.Name #> request)
		{
            return null;
		}

<#
			}
			else if (item.RequestClass.Name == kvp.Key)
            {
#>
		/// <summary>
		/// Ajoute la ressource <see cref="<#= item.RequestClass.Name #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="<#= item.RequestClass.Name #>"/> ajoutée.</returns>
		public <#= item.RequestClass.Name #> Post(<#= item.RequestClass.Name #> request)
		{
			var id = Db.Insert(request, selectIdentity: true);
			request.<#= pkProp.Name #> = (int)id;

			return request;
		}

		/// <summary>
		/// Remplace la ressource <see cref="<#= item.RequestClass.Name #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Put(<#= item.RequestClass.Name #> request)
		{
			int count = Db.Update(request);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(<#= item.RequestClass.Name #>), request.<#= pkProp.Name #>));
			}
		}

<#
            }
        } // end foreach
#>
	}
}
<#
		manager.EndBlock(); // end newfile

        if (CreateValidators)
        {
            foreach (RequestItem item in kvp.Value)
            {
                if (item.RequestClass.Name == kvp.Key)
                {
                    manager.StartNewFile(item.RequestClass.Name + "Validator.generated.cs");
#>
using ServiceStack.FluentValidation;
using <#= sourceNamespace #>;
using <#= sourceNamespace #>.Types;

namespace <#= fileNamespace #>
{
    /// <summary>
    /// Validation pour la requête <see cref="<#= item.RequestClass.Name #>"/>.
    /// </summary>
    public <#= MakeClassesPartial ? "partial " : "" #>class <#= item.RequestClass.Name #>Validator : AbstractValidator<<#= item.RequestClass.Name #>>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="<#= item.RequestClass.Name #>Validator" />.
        /// </summary>
        public <#= item.RequestClass.Name #>Validator()
        {
<#
                    var allPropsAttributes = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(item.RequestClass);
                    foreach (var prop in allPropsAttributes)
                    {
                        var lstValidation = new List<string>();

                        if (prop.Value.Any(attr => attr.FullName == "ServiceStack.DataAnnotations.RequiredAttribute"))
                        {
                            if (prop.Key.Type.AsFullName == "System.String")
                            {
                                string str = ".NotEmpty()";
                                if (ValidatorsWithMessage)
                                {
                                    str += string.Format(".WithMessage(ValidationMessages.{0}_{1}_NotEmpty)", item.RequestClass.Name, prop.Key.Name);
                                }
                                lstValidation.Add(str);
                            }
                        }
                        var strLengthAttr = prop.Value.FirstOrDefault(attr => attr.FullName == "ServiceStack.DataAnnotations.StringLengthAttribute");
                        if (strLengthAttr != null)
                        {
                            int min = 0;
                            int max = Convert.ToInt32(strLengthAttr.Value);
                            string str = string.Format(".Length({0}, {1})", min, max);
                            if (ValidatorsWithMessage)
                            {
                                str += string.Format(".WithMessage(ValidationMessages.{0}_{1}_Length, {2}, {3})", item.RequestClass.Name, prop.Key.Name, min, max);
                            }
                            lstValidation.Add(str);
                        }

                        if (prop.Key.Name == "NumEmail")
                        {
                            lstValidation.Add(".EmailAddress()");
                        }

                        if (lstValidation.Any())
                        {
#>
            RuleFor(x => x.<#= prop.Key.Name #>)
<#
                            for (int i = 0; i < lstValidation.Count; i++)
                            {
#>
                <#= lstValidation[i] #><#= i == lstValidation.Count - 1 ? ";" : "" #>
<#
                            } // end foreach
                        } // end if
                    } // end foreach
#>

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
<#
                    manager.EndBlock(); // end newfile
                }
            } // end foreach
        } // end if
    } // end forach

	manager.Process(SplitIntoMultipleFiles);
#>
<#+
class RequestItem
{
	public RequestItem()
    {
		LstRouteParts = new List<List<string>>();
    }
		
	public List<List<string>> LstRouteParts { get; set; }

	public CodeClass RequestClass { get; set; }
}

private string ToProperType(CodeTypeRef type, params string[] namespaces)
{
	if (type == null)
    {
		return "";
    }

	string str = type.AsString;
	if (namespaces != null)
    {
		foreach (string ns in namespaces)
        {
			str = str.Replace(ns + ".", "");
        }
    }
	return str;
}

private string ToCamelCase(string str)
{
	if (string.IsNullOrEmpty(str))
    {
		return "";
	}

	return str.Substring(0, 1).ToLower() + str.Substring(1);
}

private List<string> GetRouteParts(CodeAttribute routeAttr)
{
	string[] parameters = routeAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries);

	string paramPath = parameters[0].Trim();

	if (paramPath.StartsWith("\"") && paramPath.EndsWith("\""))
    {
		paramPath = paramPath.Substring(1, paramPath.Length - 2);
    }

	return paramPath.Split(new [] { '/' }, StringSplitOptions.RemoveEmptyEntries).ToList();
}

private string GetIdFromRouteParts(List<string> parts, string entityName)
{
	List<string> lstId = new List<string>();
	string currentEntity = entityName.Substring(0, 3);

	foreach (string str in parts)
    {
		if (str.StartsWith("{") && str.EndsWith("}"))
        {
			if (currentEntity == entityName)
            {
				string propName = str.Remove(0, 1); // Supprime le premier {
				propName = propName.Remove(propName.Length - 1, 1); // Supprime le dernier }
				
				lstId.Add(propName);
            }
        }
		else
		{
			currentEntity += str;
        }
    }

	string id = lstId.SingleOrDefault();
	return id ?? "";
}

private CodeProperty GetPrimaryKeyProperty(CodeClass codeClass)
{
	IEnumerable<CodeProperty> allProperties = VisualStudioHelper.CodeModel.GetAllProperties(codeClass);
	foreach (CodeProperty property in allProperties)
    {
		bool isPk = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false)
			.OfType<CodeAttribute>()
			.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.PrimaryKeyAttribute")
			.Any();
		if (isPk)
        {
			return property;
        }
    }

	return null;
}

private List<CodeProperty[]> GetUniqueProperties(CodeClass codeClass)
{
	List<CodeProperty[]> lstIdxProps = new List<CodeProperty[]>();

	IEnumerable<CodeProperty> allProperties = VisualStudioHelper.CodeModel.GetAllProperties(codeClass);

	// [CompositeIndex(true, ...)]
	IEnumerable<CodeAttribute> compositeIdxAttrs = VisualStudioHelper.CodeModel.GetAllClassAttributes(codeClass)
		.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.CompositeIndexAttribute")
		.ToList();
	foreach (CodeAttribute idxAttr in compositeIdxAttrs)
    {
		List<string> parameters = idxAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToList();
		
		string str1 = parameters.SingleOrDefault(p => p.StartsWith("Unique"));
		if (string.IsNullOrEmpty(str1))
        {
			str1 = parameters.FirstOrDefault();
        }
		bool unique = false;
		bool.TryParse(str1, out unique);
		if (unique)
        {
			List<CodeProperty> lstProps = new List<CodeProperty>();
			foreach (string par in parameters)
            {
				string strParam = "";
				if (par.StartsWith("nameof(") && par.EndsWith(")"))
                {
					strParam = par.Substring(7, par.Length - 8);
                }
				else if (par.StartsWith("\"") && par.EndsWith("\""))
                {
					strParam = par.Substring(1, par.Length - 2);
				}

				if (!string.IsNullOrEmpty(strParam))
                {
    				CodeProperty prop = allProperties.SingleOrDefault(p => p.Name == strParam);
					if (prop != null)
                    {
						lstProps.Add(prop);
                    }
                }
			}

			lstIdxProps.Add(lstProps.ToArray());
        }
    }
	
	// [Index(true)]
	foreach (CodeProperty property in allProperties)
    {
		IEnumerable<CodeAttribute> idxAttrs = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false)
			.OfType<CodeAttribute>()
			.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.IndexAttribute")
			.ToList();
		foreach (CodeAttribute idxAttr in idxAttrs)
        {
			List<string> parameters = idxAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToList();

			string str1 = parameters.SingleOrDefault(p => p.StartsWith("Unique"));
			if (string.IsNullOrEmpty(str1))
			{
				str1 = parameters.FirstOrDefault();
			}
			bool unique = false;
			bool.TryParse(str1, out unique);
			if (unique)
			{
				lstIdxProps.Add(new [] { property });
            }
        }
    }

	return lstIdxProps;
}
#>