//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.Services.ServiceModel;
using Tmpi.Pyrene.Services.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;

namespace Tmpi.Pyrene.Services.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenCompteur"/>.
	/// </summary>
	public partial class GenCompteurService : Service
	{
		/// <summary>
		/// Supprime la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenCompteur request)
		{
			int count = Db.DeleteById<GenCompteur>(request.CleCompteur);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenCompteurValeur request)
		{
			int count = Db.DeleteById<GenCompteurValeur>(request.CleValeur);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}
		}

		/// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteur"/>.
		/// </summary>
		protected bool GenCompteurTypCompteurCleServiceEstUnique(GenCompteur model)
		{
            var q = Db.From<GenCompteur>().Where(x => x.TypCompteur == model.TypCompteur).Where(x => x.CleService == model.CleService);
			if (model.CleCompteur != 0)
			{
				q.Where(x => x.CleCompteur != model.CleCompteur);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteur"/>.
		/// </summary>
		protected bool GenCompteurCodCompteurEstUnique(GenCompteur model)
		{
            var q = Db.From<GenCompteur>().Where(x => x.CodCompteur == model.CodCompteur);
			if (model.CleCompteur != 0)
			{
				q.Where(x => x.CleCompteur != model.CleCompteur);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteur"/> ajoutée.</returns>
		public GenCompteur Post(GenCompteur request)
		{
			long id = Db.Insert(request, selectIdentity: true);
			request.CleCompteur = (int)id;

			return request;
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Put(GenCompteur request)
		{
			int count = Db.Update(request);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}
		}

		/// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteurValeur"/>.
		/// </summary>
		protected bool GenCompteurValeurCleCompteurValPeriodeEstUnique(GenCompteurValeur model)
		{
            var q = Db.From<GenCompteurValeur>().Where(x => x.CleCompteur == model.CleCompteur).Where(x => x.ValPeriode == model.ValPeriode);
			if (model.CleValeur != 0)
			{
				q.Where(x => x.CleValeur != model.CleValeur);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteurValeur"/> ajoutée.</returns>
		public GenCompteurValeur Post(GenCompteurValeur request)
		{
			long id = Db.Insert(request, selectIdentity: true);
			request.CleValeur = (int)id;

			return request;
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Put(GenCompteurValeur request)
		{
			int count = Db.Update(request);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteur"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public GenCompteur Get(GetGenCompteur request)
		{
            ModelDefinitionHelper.UndefinedFields<GenCompteur>(request.Fields);

            var q = Db.From<GenCompteur>().Where(x => x.CleCompteur == request.CleCompteur).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteurValeur"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public GenCompteurValeur Get(GetGenCompteurValeur request)
		{
            ModelDefinitionHelper.UndefinedFields<GenCompteurValeur>(request.Fields);

            var q = Db.From<GenCompteurValeur>().Where(x => x.CleValeur == request.CleValeur).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Patch(PatchGenCompteur request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenCompteur>(patchDic.Keys);

			var entity = new GenCompteur();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenCompteur>().Where(x => x.CleCompteur == request.CleCompteur).Update(patchDic.Keys);

			int count = Db.UpdateOnly(entity, q);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Patch(PatchGenCompteurValeur request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenCompteurValeur>(patchDic.Keys);

			var entity = new GenCompteurValeur();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenCompteurValeur>().Where(x => x.CleValeur == request.CleValeur).Update(patchDic.Keys);

			int count = Db.UpdateOnly(entity, q);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenCompteur request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenCompteur>().Where(x => x.LibCompteur.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
