//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.Services.ServiceModel;
using Tmpi.Pyrene.Services.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;

namespace Tmpi.Pyrene.Services.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenFourn" />.
	/// </summary>
	public partial class GenFournService : Service
	{
		/// <summary>
		/// Retourne la ressource <see cref="GenFourn" /> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFourn" /> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public GenFourn Get(GetGenFourn request)
		{
            if (!request.Fields.IsNullOrEmpty())
            {
                var errFields = ModelDefinitionHelper.GetUndefinedFields<GenFourn>(request.Fields);
                if (errFields.Any())
                {
                    string str = string.Join(", ", errFields.Select(f => "'" + f + "'"));
                    throw new ArgumentException(
                        string.Format(ServicesErrorMessages.ResourceFieldsNotFound, nameof(GenFourn), str));
                }
            }

            var q = Db.From<GenFourn>().Where<GenFourn>(x => x.CleFourn == request.CleFourn).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenFourn), "request.Id"));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenFournBanque" /> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournBanque" /> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public GenFournBanque Get(GetGenFournBanque request)
		{
            if (!request.Fields.IsNullOrEmpty())
            {
                var errFields = ModelDefinitionHelper.GetUndefinedFields<GenFournBanque>(request.Fields);
                if (errFields.Any())
                {
                    string str = string.Join(", ", errFields.Select(f => "'" + f + "'"));
                    throw new ArgumentException(
                        string.Format(ServicesErrorMessages.ResourceFieldsNotFound, nameof(GenFournBanque), str));
                }
            }

            var q = Db.From<GenFournBanque>().Join<GenFourn>().Where<GenFourn>(x => x.CleFourn == request.CleFourn).Where<GenFournBanque>(x => x.CleBanque == request.CleBanque).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenFournBanque), "request.Id"));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenFournContact" /> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournContact" /> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public GenFournContact Get(GetGenFournContact request)
		{
            if (!request.Fields.IsNullOrEmpty())
            {
                var errFields = ModelDefinitionHelper.GetUndefinedFields<GenFournContact>(request.Fields);
                if (errFields.Any())
                {
                    string str = string.Join(", ", errFields.Select(f => "'" + f + "'"));
                    throw new ArgumentException(
                        string.Format(ServicesErrorMessages.ResourceFieldsNotFound, nameof(GenFournContact), str));
                }
            }

            var q = Db.From<GenFournContact>().Join<GenFourn>().Where<GenFourn>(x => x.CleFourn == request.CleFourn).Where<GenFournContact>(x => x.CleContact == request.CleContact).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenFournContact), "request.Id"));
			}

			return entity;
		}

	}
}
