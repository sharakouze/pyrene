//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.Services.ServiceModel;
using Tmpi.Pyrene.Services.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;

namespace Tmpi.Pyrene.Services.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenFourn"/>.
	/// </summary>
	public partial class GenFournService : Service
	{
		/// <summary>
		/// 
		/// </summary>
		protected bool GenFournCodFournEstUnique(GenFourn model)
		{
            var q = Db.From<GenFourn>().Where(x => x.CodFourn == model.CodFourn);
			if (model.CleFourn != 0)
			{
				q.Where(x => x.CleFourn != model.CleFourn);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFourn"/> ajoutée.</returns>
		public GenFourn Post(GenFourn request)
		{
			var id = Db.Insert(request, selectIdentity: true);
			request.CleFourn = (int)id;

			return request;
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError">La ressource spécifiée est introuvable.</exception>
		public void Put(GenFourn request)
		{
			int count = Db.Update(request);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServicesErrorMessages.ResourceByIdNotFound, nameof(GenFourn), request.CleFourn));
			}
		}

		/// <summary>
		/// 
		/// </summary>
		protected bool GenFournBanqueCleFournCodIBANEstUnique(GenFournBanque model)
		{
            var q = Db.From<GenFournBanque>().Where(x => x.CleFourn == model.CleFourn).Where(x => x.CodIBAN == model.CodIBAN);
			if (model.CleBanque != 0)
			{
				q.Where(x => x.CleBanque != model.CleBanque);
			}

			return Db.Exists(q);
		}

		/// <summary>
		/// 
		/// </summary>
		protected bool GenFournContactCleFournNomContactEstUnique(GenFournContact model)
		{
            var q = Db.From<GenFournContact>().Where(x => x.CleFourn == model.CleFourn).Where(x => x.NomContact == model.NomContact);
			if (model.CleContact != 0)
			{
				q.Where(x => x.CleContact != model.CleContact);
			}

			return Db.Exists(q);
		}

	}
}
