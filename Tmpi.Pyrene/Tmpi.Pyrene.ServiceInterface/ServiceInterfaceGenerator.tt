<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\VisualStudioHelper.ttinclude" #>
<#
	/***** TODO *****
	- Trace des fields introuvables dans Get et Patch
	- Unicité
	****************/

	/*********************/
	/** CUSTOM SETTINGS **/
	/*********************/

	// Namespace des fichiers générés. Si vide DefaultNamespace du projet/répertoire courant.
	string Namespace = "";

	// Limite le traitement aux classes dans ce projet.
	string SourceProject = "Tmpi.Pyrene.ServiceModel";
	
	// true pour générer des classes partial.
	bool MakeClassesPartial = true;

	// true pour générer chaque classe dans un fichier séparé.
	bool SplitIntoMultipleFiles = true;
    
    // true pour créer les validors de la ValidationFeature
    bool CreateValidators = true;

    // true pour rajouter .WithMessage() pour chaque RuleFor
    bool ValidatorsWithMessage = false;

	// RegExp pour filtrer globalement les classes traitées, null pour tout inclure et/ou ne rien exclure.
	Regex ClassFilterInclude = null;
	Regex ClassFilterExclude = null;

#>
<#
	// namespace
	string fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		fileNamespace = VisualStudioHelper.CurrentFileNamespace;
	}

	// get a reference to the project of this t4 template
	Project srcProject = VisualStudioHelper.CurrentProject;
	if (!string.IsNullOrWhiteSpace(SourceProject))
    {
		srcProject = VisualStudioHelper.GetProject(SourceProject);
    }

	string sourceNamespace = VisualStudioHelper.GetDefaultNamespace(srcProject);

	Manager manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Ce code a été généré par un outil.
//
// Les modifications apportées à ce fichier peuvent provoquer un comportement
// incorrect et seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	manager.EndBlock(); // end header

	Dictionary<string, List<RequestItem>> dicRequest = new Dictionary<string, List<RequestItem>>();

    // get all class items from the code model
    List<CodeClass> allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(srcProject.CodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
		.OfType<CodeClass>()
		.OrderBy(c => c.Name)
		.ToList();

    foreach (CodeClass codeClass in allClasses)
    {
		bool included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		bool excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
        {
			continue;
        }

		string pocoClassName = null;
        if (codeClass.Name.StartsWith("Get"))
        {
			pocoClassName = codeClass.Name.Substring(3);
        }
        else if (codeClass.Name.StartsWith("Delete"))
        {
 			pocoClassName = codeClass.Name.Substring(6);
        }
        else if (codeClass.Name.StartsWith("Patch"))
        {
            pocoClassName = codeClass.Name.Substring(5);
        }
        else if (codeClass.Name.StartsWith("Search"))
        {
			pocoClassName = codeClass.Name.Substring(6);
        }
        else if (codeClass.Name.StartsWith("Select"))
        {
			pocoClassName = codeClass.Name.Substring(6);
        }
		else
		{
			pocoClassName = codeClass.Name;
		}

		List<CodeAttribute> lstRouteAttrs = VisualStudioHelper.CodeModel.GetAllClassAttributes(codeClass)
			.Where(attr => attr.FullName == "ServiceStack.RouteAttribute")
			.ToList();
		if (lstRouteAttrs.Any() && !string.IsNullOrEmpty(pocoClassName))
        {
			List<RequestItem> items = dicRequest.Where(kvp => pocoClassName.StartsWith(kvp.Key)).Select(kvp => kvp.Value).SingleOrDefault();
			if (items == null)
			{
				items = new List<RequestItem>();
				dicRequest.Add(pocoClassName, items);
			}

			RequestItem item = new RequestItem();
			item.RequestClass = codeClass;
			item.PocoClass = allClasses.SingleOrDefault(c => c.Name == pocoClassName);
			foreach (CodeAttribute routeAttr in lstRouteAttrs)
			{
				item.LstRouteParts.Add(GetRouteParts(routeAttr));
			}
			items.Add(item);
        }
    } // end foreach

	foreach (var kvp in dicRequest)
	{
		string serviceClassName = kvp.Key + "Service";
		manager.StartNewFile(serviceClassName + ".generated.cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using Audit.Core;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.Common;
using Tmpi.Pyrene.Common.Linq;
using <#= sourceNamespace #>;
using <#= sourceNamespace #>.Types;

namespace <#= fileNamespace #>
{
<#
		string entityName = kvp.Key;
		if (entityName == "Service")
        {
			entityName = "ServiceModel.Types." + entityName;
        }
#>
	/// <summary>
	/// Service qui traite les requêtes sur les entités <see cref="<#= entityName #>"/>.
	/// </summary>
<#
		List<string> lstSeeAlso = kvp.Value.Select(i => i.PocoClass.Name).Distinct().ToList();
		foreach (string str in lstSeeAlso.Where(s => s != kvp.Key))
        {
#>
	/// <seealso cref="<#= str #>"/>
<#
        }
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= serviceClassName #> : ServiceStack.Service
	{
<#
        foreach (string str in lstSeeAlso)
        {
#>
		private static readonly object _<#= ToCamelCase(str) #>Lock = new object();
<#
        }
#>

<#
		Dictionary<string, List<string>> dicPocoUnicityMethods = new Dictionary<string, List<string>>();

		foreach (RequestItem item in kvp.Value)
        {
			string requestClassName = item.RequestClass.Name;
			string pocoClassName = item.PocoClass.Name;
			if (pocoClassName == "Service")
            {
				pocoClassName = "ServiceModel.Types." + pocoClassName;
            }

			string stdColFormat = "{0}" + item.PocoClass.Name;
			if (item.PocoClass.Name != kvp.Key)
            {
				stdColFormat = ReplaceFirst(item.PocoClass.Name, kvp.Key, "{0}");
            }

			IEnumerable<CodeProperty> allPocoProperties = VisualStudioHelper.CodeModel.GetAllProperties(item.PocoClass);
			CodeProperty pkProp = GetPrimaryKeyProperty(allPocoProperties);

			if (!dicPocoUnicityMethods.ContainsKey(item.PocoClass.Name) && (pkProp != null))
            {
				/*************/
				/** UNICITE **/
				/*************/

				dicPocoUnicityMethods.Add(item.PocoClass.Name, new List<string>());

				List<CodeProperty[]> lstIdxProps = GetUniqueProperties(item.PocoClass, allPocoProperties);
				foreach (CodeProperty[] lstProps in lstIdxProps)
				{
					string methodName = item.PocoClass.Name + "_" + string.Join("_", lstProps.Select(p => p.Name)) + "_EstUnique";
					dicPocoUnicityMethods[item.PocoClass.Name].Add(methodName);
#>
		/// <summary>
		/// Teste l'unicité d'une entité <see cref="<#= pocoClassName #>"/>.
		/// </summary>
		/// <param name="model"></param>
		/// <param name="fields"></param>
		/// <returns></returns>
		protected bool <#= methodName #>(<#= pocoClassName #> model, IEnumerable<string> fields = null)
		{
			var q = Db.From<<#= pocoClassName #>>();

<#
					if (lstProps.Length > 1)
                    {
#>
			if (fields != null)
			{
				var uniqueFields = new[] { <#= string.Join(", ", lstProps.Select(p => "nameof(" + pocoClassName + "." + p.Name + ")")) #> };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN <#= pocoClassName #> t2 ON t2.<#= pkProp.Name #>=xxx [...]
					Expression<Func<<#= pocoClassName #>, <#= pocoClassName #>, bool>> joinExpr = (t1, t2)
						=> (t2.<#= pkProp.Name #> == model.<#= pkProp.Name #>);

<#
						foreach (CodeProperty prop in lstProps)
						{
#>
					if (!fields.Contains(nameof(<#= pocoClassName #>.<#= prop.Name #>), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.<#= prop.Name #>=t2.<#= prop.Name #>
						joinExpr = joinExpr.And((t1, t2) => t1.<#= prop.Name #> == t2.<#= prop.Name #>);
					}
<#
						}
#>

					q.Join<<#= pocoClassName #>>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
<#
                    }
					foreach (CodeProperty prop in lstProps)
                    {
#>
			if (fields == null || fields.Contains(nameof(<#= pocoClassName #>.<#= prop.Name #>), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.<#= prop.Name #> == model.<#= prop.Name #>);
			}
<#
						if (lstProps.Length == 1)
                        {
#>
			else
			{
				return true;
			}
<#
                        }
                    }
#>

			if (model.<#= pkProp.Name #> != 0)
			{
				q.Where(t1 => t1.<#= pkProp.Name #> != model.<#= pkProp.Name #>);
			}

			return !Db.Exists(q);
		}

<#
				}
            }

			if (pkProp != null)
            {
				if (requestClassName.StartsWith("Select"))
                {
					/************/
					/** SELECT **/
					/************/

#>
		/// <summary>
		/// Retourne l'entité <see cref="<#= pocoClassName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Entité <see cref="<#= pocoClassName #>"/> trouvée.</returns>
		/// <exception cref="ArgumentException">L'entité ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">L'entité spécifiée est introuvable.</exception>
		public <#= requestClassName #>Response Get(<#= requestClassName #> request)
		{
			var q = Db.From<<#= pocoClassName #>>()
				.Limit(request.Skip, request.Take);

			if (request.Sort.IsNullOrEmpty())
			{
<# 
	string propName = GetFirstOccurenceOfProperty(allPocoProperties, 
		string.Format(stdColFormat, "Lib"), string.Format(stdColFormat, "Cod"), string.Format(stdColFormat, "Num"), string.Format(stdColFormat, "Nom"));
	if (string.IsNullOrEmpty(propName))
    {
		propName = pkProp.Name;
    }
#>
				q.OrderBy(x => x.<#= propName #>); // Tri par défaut.
			}
			else
			{
				q.OrderByFields(request.Sort);
			}

			long count = Db.Count(q);
			var lst = Db.LoadSelect(q);

			return new <#= requestClassName #>Response
			{
				TotalCount = (int)count,
				Results = lst
			};
		}

<#
                }
				else if (requestClassName.StartsWith("Get"))
				{
					/**************/
					/** GET BYID **/
					/**************/
#>
		/// <summary>
		/// Retourne l'entité <see cref="<#= pocoClassName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Entité <see cref="<#= pocoClassName #>"/> trouvée.</returns>
		/// <exception cref="ArgumentException">L'entité ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">L'entité spécifiée est introuvable.</exception>
		public <#= pocoClassName #> Get(<#= requestClassName #> request)
		{
			//ModelDefinitionHelper.UndefinedFields<<#= pocoClassName #>>(request.Fields);

			var q = Db.From<<#= pocoClassName #>>().Where(x => x.<#= pkProp.Name #> == request.<#= pkProp.Name #>).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.EntityByIdNotFound, nameof(<#= pocoClassName #>), request.<#= pkProp.Name #>));
			}

			return entity;
		}

<#
				}
				else if (requestClassName.StartsWith("Delete"))
				{
					/*****************/
					/** DELETE BYID **/
					/*****************/
#>
		/// <summary>
		/// Supprime l'entité <see cref="<#= pocoClassName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">L'entité spécifiée est introuvable.</exception>
		public void Delete(<#= requestClassName #> request)
		{
			using (var scope = AuditScope.Create("<#= pocoClassName #>:Delete", () => request))
			{
				int count = Db.DeleteById<<#= pocoClassName #>>(request.<#= pkProp.Name #>);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.EntityByIdNotFound, nameof(<#= pocoClassName #>), request.<#= pkProp.Name #>));
				}

				scope.Save();
			}
		}

<#
				}
				else if (requestClassName.StartsWith("Patch"))
				{
					/****************/
					/** PATCH BYID **/
					/****************/
#>
		/// <summary>
		/// Met à jour l'entité <see cref="<#= pocoClassName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">L'entité ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">L'entité spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(<#= requestClassName #> request)
		{
			if (request.Operations.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Operations));
			}

			var patchDic = request.Operations.ToDictionary(f => f.Field, f => f.Value);

			//ModelDefinitionHelper.UndefinedFields<<#= pocoClassName #>>(patchDic.Keys);

			var entity = new <#= pocoClassName #>();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<<#= pocoClassName #>>().Where(x => x.<#= pkProp.Name #> == request.<#= pkProp.Name #>).Update(patchDic.Keys);

			lock (_<#= ToCamelCase(item.PocoClass.Name) #>Lock)
			{
<# 
				int i = 1;
				foreach (var meth in dicPocoUnicityMethods.Where(k => k.Key == item.PocoClass.Name).SelectMany(k => k.Value))
                {
#>
				bool unique<#= i.ToString() #> = <#= meth #>(entity, patchDic.Keys);
				if (!unique<#= i.ToString() #>)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.EntityNotUnique, nameof(<#= pocoClassName #>)));
				}
<# 
					i++;
                }
#>

				using (var scope = AuditScope.Create("<#= pocoClassName #>:Update", () => entity))
				{
					int count = Db.UpdateOnly(entity, q);
					if (count == 0)
					{
						throw HttpError.NotFound(
							string.Format(ServiceErrorMessages.EntityByIdNotFound, nameof(<#= pocoClassName #>), request.<#= pkProp.Name #>));
					}

					scope.Save();
				}
			}
		}

<#
				}
            }

			if (requestClassName.StartsWith("Search"))
            {
#>
		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public <#= requestClassName #>Response Get(<#= requestClassName #> request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

			var q = Db.From<<#= pocoClassName #>>()
				.Where(x => x.<#= string.Format(stdColFormat, "Lib") #>.Contains(request.Text))
				.Select(x => new { CleObjet = x.<#= string.Format(stdColFormat, "Cle") #>,  CodObjet = x.<#= string.Format(stdColFormat, "Cod") #>, LibObjet = x.<#= string.Format(stdColFormat, "Lib") #> });
			if (request.Max > 0)
			{
				q.Limit(request.Max);
			}

			var items = Db.Select<BaseEntity>(q);

			return new <#= requestClassName #>Response
			{
				Results = items
			};
		}

<#
            }
			else if (requestClassName.StartsWith(kvp.Key))
            {
#>
		/// <summary>
		/// Ajoute ou remplace l'entité <see cref="<#= pocoClassName #>"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Entité <see cref="<#= pocoClassName #>"/> ajoutée.</returns>
		/// <exception cref="HttpError.NotFound">L'entité spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public <#= pocoClassName #> Post(<#= pocoClassName #> request)
		{
			lock (_<#= ToCamelCase(item.PocoClass.Name) #>Lock)
			{
<# 
				int i = 1;
				foreach (var meth in dicPocoUnicityMethods.Where(k => k.Key == item.PocoClass.Name).SelectMany(k => k.Value))
                {
#>
				bool unique<#= i.ToString() #> = <#= meth #>(request);
				if (!unique<#= i.ToString() #>)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.EntityNotUnique, nameof(<#= pocoClassName #>)));
				}
<# 
					i++;
                }
#>

				if (request.<#= pkProp.Name #> == 0)
				{
					using (var scope = AuditScope.Create("<#= pocoClassName #>:Insert", () => request))
					{
						long id = Db.Insert(request, selectIdentity: true);
						request.<#= pkProp.Name #> = (int)id;

						scope.Save();
					}
				}
				else
				{
					using (var scope = AuditScope.Create("<#= pocoClassName #>:Update", () => request))
					{
						int count = Db.Update(request);
						if (count == 0)
						{
							throw HttpError.NotFound(
								string.Format(ServiceErrorMessages.EntityByIdNotFound, nameof(<#= pocoClassName #>), request.<#= pkProp.Name #>));
						}

						scope.Save();
					}
				}

				return request;
			}
		}

<#
            }
        } // end foreach
#>
	}
}
<#
		manager.EndBlock(); // end newfile

        if (CreateValidators)
        {
            foreach (RequestItem item in kvp.Value)
            {
                if (item.RequestClass == item.PocoClass)
                {
					string pocoClassName = item.PocoClass.Name;
					Dictionary<string, List<string>> dicValidation = new Dictionary<string, List<string>>();

                    var allPropsAttributes = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(item.RequestClass);
                    foreach (var prop in allPropsAttributes)
                    {
                        var lstValidation = new List<string>();

                        if (prop.Value.Any(attr => attr.FullName == "ServiceStack.DataAnnotations.RequiredAttribute"))
                        {
                            if (prop.Key.Type.AsFullName == "System.String")
                            {
                                string str = ".NotEmpty()";
                                if (ValidatorsWithMessage)
                                {
                                    str += string.Format(".WithMessage(ValidationMessages.{0}_{1}_NotEmpty)", pocoClassName, prop.Key.Name);
                                }
                                lstValidation.Add(str);
                            }
                        }
                        var strLengthAttr = prop.Value.FirstOrDefault(attr => attr.FullName == "ServiceStack.DataAnnotations.StringLengthAttribute");
                        if (strLengthAttr != null)
                        {
                            int min = 0;
                            int max = Convert.ToInt32(strLengthAttr.Value);
                            string str = string.Format(".Length({0}, {1})", min, max);
                            if (ValidatorsWithMessage)
                            {
                                str += string.Format(".WithMessage(ValidationMessages.{0}_{1}_Length, {2}, {3})", pocoClassName, prop.Key.Name, min, max);
                            }
                            lstValidation.Add(str);
                        }

                        if (prop.Key.Name == "NumEmail")
                        {
                            lstValidation.Add(".EmailAddress()");
                        }

						if (lstValidation.Any())
                        {
							dicValidation.Add(prop.Key.Name, lstValidation);
                        }
					}

					if (dicValidation.Any())
                    {
						manager.StartNewFile(pocoClassName + "Validator.generated.cs");
#>
using ServiceStack.FluentValidation;
using <#= sourceNamespace #>;
using <#= sourceNamespace #>.Types;

namespace <#= fileNamespace #>
{
	/// <summary>
	/// Validation pour la requête <see cref="<#= pocoClassName #>"/>.
	/// </summary>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= pocoClassName #>Validator : AbstractValidator<<#= pocoClassName #>>
	{
		/// <summary>
		/// Initialise une nouvelle instance de la classe <see cref="<#= pocoClassName #>Validator" />.
		/// </summary>
		public <#= pocoClassName #>Validator()
		{
<#
						foreach (var kvp2 in dicValidation)
                        {
#>
			RuleFor(x => x.<#= kvp2.Key #>)
<#
                            for (int i = 0; i < kvp2.Value.Count; i++)
                            {
#>
				<#= kvp2.Value[i] #><#= i == kvp2.Value.Count - 1 ? ";" : "" #>
<#
                            }
                        }
               
#>

			SetRules();
		}

		/// <summary>
		/// Définit des règles de validation supplémentaires.
		/// </summary>
		partial void SetRules();
	}
}
<#
                    manager.EndBlock(); // end newfile
                    } 
                }
            } // end foreach
        }
    } // end forach

	manager.Process(SplitIntoMultipleFiles);
#>
<#+
class RequestItem
{
	public RequestItem()
    {
		LstRouteParts = new List<List<string>>();
    }
		
	public List<List<string>> LstRouteParts { get; set; }

	public CodeClass PocoClass { get; set; }

	public CodeClass RequestClass { get; set; }
}

private string GetFirstOccurenceOfProperty(IEnumerable<CodeProperty> lstProperties, params string[] propertyNames)
{
	IEnumerable<string> lst = lstProperties.Select(p => p.Name);

	string propName = null;
	foreach (string prop in propertyNames)
    {
		propName = lst.FirstOrDefault(p => p == prop);
		if (!string.IsNullOrEmpty(propName))
        {
			break;
        }
    }

	return propName;
}

private string ReplaceFirst(string text, string search, string replace)
{
	int pos = text.IndexOf(search);
	if (pos < 0)
	{
		return text;
	}
	return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);
}

private string ToProperType(CodeTypeRef type, params string[] namespaces)
{
	if (type == null)
    {
		return "";
    }

	string str = type.AsString;
	if (namespaces != null)
    {
		foreach (string ns in namespaces)
        {
			str = str.Replace(ns + ".", "");
        }
    }
	return str;
}

private string ToCamelCase(string str)
{
	if (string.IsNullOrEmpty(str))
    {
		return "";
	}
	if (str == str.ToUpper())
    {
		return str.ToLower();
    }
	return str.Substring(0, 1).ToLower() + str.Substring(1);
}

private List<string> GetRouteParts(CodeAttribute routeAttr)
{
	string[] parameters = routeAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries);

	string paramPath = parameters[0].Trim();

	if (paramPath.StartsWith("\"") && paramPath.EndsWith("\""))
    {
		paramPath = paramPath.Substring(1, paramPath.Length - 2);
    }

	return paramPath.Split(new [] { '/' }, StringSplitOptions.RemoveEmptyEntries).ToList();
}

private string GetIdFromRouteParts(List<string> parts, string pocoClassName)
{
	List<string> lstId = new List<string>();
	string currentEntity = pocoClassName;

	foreach (string str in parts)
    {
		if (str.StartsWith("{") && str.EndsWith("}"))
        {
			if (currentEntity == pocoClassName)
            {
				string propName = str.Remove(0, 1); // Supprime le premier {
				propName = propName.Remove(propName.Length - 1, 1); // Supprime le dernier }
				
				lstId.Add(propName);
            }
        }
		else
		{
			currentEntity += str;
        }
    }

	string id = lstId.SingleOrDefault();
	return id ?? "";
}

private CodeProperty GetPrimaryKeyProperty(IEnumerable<CodeProperty> lstProperties)
{
	foreach (CodeProperty property in lstProperties)
    {
		bool isPk = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false)
			.OfType<CodeAttribute>()
			.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.PrimaryKeyAttribute")
			.Any();
		if (isPk)
        {
			return property;
        }
    }

	return null;
}

private List<CodeProperty[]> GetUniqueProperties(CodeClass codeClass, IEnumerable<CodeProperty> lstProperties)
{
	List<CodeProperty[]> lstIdxProps = new List<CodeProperty[]>();

	// [CompositeIndex(true, ...)]
	IEnumerable<CodeAttribute> compositeIdxAttrs = VisualStudioHelper.CodeModel.GetAllClassAttributes(codeClass)
		.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.CompositeIndexAttribute")
		.ToList();
	foreach (CodeAttribute idxAttr in compositeIdxAttrs)
    {
		List<string> parameters = idxAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToList();
		
		string str1 = parameters.SingleOrDefault(p => p.StartsWith("Unique"));
		if (string.IsNullOrEmpty(str1))
        {
			str1 = parameters.FirstOrDefault();
        }
		bool unique = false;
		bool.TryParse(str1, out unique);
		if (unique)
        {
			List<CodeProperty> lstProps = new List<CodeProperty>();
			foreach (string par in parameters)
            {
				string strParam = "";
				if (par.StartsWith("nameof(") && par.EndsWith(")"))
                {
					strParam = par.Substring(7, par.Length - 8);
                }
				else if (par.StartsWith("\"") && par.EndsWith("\""))
                {
					strParam = par.Substring(1, par.Length - 2);
				}

				if (!string.IsNullOrEmpty(strParam))
                {
    				CodeProperty prop = lstProperties.SingleOrDefault(p => p.Name == strParam);
					if (prop != null)
                    {
						lstProps.Add(prop);
                    }
                }
			}

			lstIdxProps.Add(lstProps.ToArray());
        }
    }
	
	// [Index(true)]
	foreach (CodeProperty property in lstProperties)
    {
		IEnumerable<CodeAttribute> idxAttrs = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(property.Attributes, vsCMElement.vsCMElementAttribute, false)
			.OfType<CodeAttribute>()
			.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.IndexAttribute")
			.ToList();
		foreach (CodeAttribute idxAttr in idxAttrs)
        {
			List<string> parameters = idxAttr.Value.Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries).Select(p => p.Trim()).ToList();

			string str1 = parameters.SingleOrDefault(p => p.StartsWith("Unique"));
			if (string.IsNullOrEmpty(str1))
			{
				str1 = parameters.FirstOrDefault();
			}
			bool unique = false;
			bool.TryParse(str1, out unique);
			if (unique)
			{
				lstIdxProps.Add(new [] { property });
            }
        }
    }

	return lstIdxProps;
}
#>