<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\MultipleOutputHelper.ttinclude" once="true" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\VisualStudioHelper.ttinclude" once="true" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\ServiceModelHelper.ttinclude" once="true" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\ServiceInterfaceHelper.ttinclude" once="true" #>
<#
	/***** TODO *****
	- Trace des fields introuvables dans Get et Patch
	- Unicité
	****************/

	/*********************/
	/** CUSTOM SETTINGS **/
	/*********************/

	// Namespace des fichiers générés. Si vide DefaultNamespace du projet/répertoire courant.
	string BaseNamespace = "";
	// {0} = BaseNamespace
    string NamespaceServices = "{0}";
    string NamespaceValidators = "{0}.Validators";

	// Limite le traitement aux classes dans ce projet.
	string SourceProject = "Tmpi.Pyrene.ServiceModel";
	
	// true pour générer des classes partial.
	bool MakeClassesPartial = true;

	// true pour générer chaque classe dans un fichier séparé.
	bool SplitIntoMultipleFiles = true;
	// Extension des fichiers générés
	string FileExtension = ".generated.cs";
	string FilePrefix = "ServiceInterface.";

	// tableau de numéros d'avertissement à désactiver ; null ou vide pour ignorer.
	int[] PragmaWarningDisable = new [] { 1591 };
    
    // true pour créer les validors de la ValidationFeature
    bool CreateValidators = true;

    // true pour rajouter .WithMessage() pour chaque RuleFor
    bool ValidatorsWithMessage = false;

	// RegExp pour filtrer globalement les classes traitées, null pour tout inclure et/ou ne rien exclure.
	Regex ClassFilterInclude = null;
	Regex ClassFilterExclude = null;

	bool Timestamping = true;

#>
<#
	GenerationEnvironment.Clear();
	if (Timestamping)
	{
#>
// <#= DateTime.Now.ToString("s") #>

<#
	}

	var vsHelper = AutomationHelper.Create(this);

	// namespace
	if (string.IsNullOrWhiteSpace(BaseNamespace))
    {
		BaseNamespace = vsHelper.GetTemplateFileNamespace();
	}

	// get a reference to the project of this t4 template
	var srcProject = vsHelper.CurrentProject;
	if (!string.IsNullOrWhiteSpace(SourceProject))
    {
		srcProject = vsHelper.GetProject(SourceProject);
    }

	string sourceNamespace = vsHelper.GetDefaultNamespace(srcProject);

	var manager = Manager.Create(this);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Ce code a été généré par un outil.
//
// Les modifications apportées à ce fichier peuvent provoquer un comportement
// incorrect et seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	if (PragmaWarningDisable != null && PragmaWarningDisable.Any())
    {
		string strWarningList = string.Join(", ", PragmaWarningDisable.Select(n => n.ToString()));
#>
#pragma warning disable <#= strWarningList #>

<#
    }

	manager.EndBlock(); // end header
	
	var svcInterface = new ServiceInterfaceHelper(this);
	svcInterface.MakeClassesPartial = MakeClassesPartial;

	var svcModel = new ServiceModelHelper(this);
	var lstRequests = svcModel.GetRequests(srcProject, ClassFilterInclude, ClassFilterExclude);
	foreach (var grpRequest in lstRequests.GroupBy(r => r.BaseEntityName))
	{
		string serviceNamespace = string.Format(NamespaceServices, BaseNamespace);
		string serviceClassName = grpRequest.Key + "Service";
		string serviceFileName = ServiceInterfaceUtils.GetGeneratedFilename(serviceClassName, serviceNamespace, BaseNamespace);
		manager.StartNewFile(FilePrefix + serviceFileName + FileExtension);

		svcInterface.WriteService(grpRequest.Key, sourceNamespace, serviceNamespace, grpRequest.OrderBy(r => r.Name));

		manager.EndBlock(); // end newfile

        if (CreateValidators)
        {
			string validatorNamespace = string.Format(NamespaceValidators, BaseNamespace);
			string validatorClassName = grpRequest.Key;
			string validatorFileName = ServiceInterfaceUtils.GetGeneratedFilename(validatorClassName, validatorNamespace, BaseNamespace);
			manager.StartNewFile(FilePrefix + validatorFileName + FileExtension);

			var validatorRequests = grpRequest.Where(r => r.Name == r.PocoClassName).OrderBy(r => r.Name);
			svcInterface.WriteValidator(sourceNamespace, validatorNamespace, validatorRequests, ValidatorsWithMessage);

			manager.EndBlock(); // end newfile
        }
    } // end foreach

	manager.Process(SplitIntoMultipleFiles);
#>
<#+
public static class ServiceInterfaceUtils
{
	public static string GetGeneratedFilename(string filename, string fileNamespace, string baseNamespace)
	{
		if (fileNamespace == baseNamespace)
		{
			return filename;
		}

		string str = fileNamespace.Replace(baseNamespace, "");
		if (str.StartsWith("."))
		{
			str = str.Remove(0, 1);
		}
		if (!str.EndsWith("."))
		{
			str = str + ".";
		}
		return str + filename;
	}

	private static string ToProperType(EnvDTE.CodeTypeRef type, params string[] namespaces)
	{
		if (type == null)
		{
			return "";
		}

		string str = type.AsString;
		if (namespaces != null)
		{
			foreach (string ns in namespaces)
			{
				str = str.Replace(ns + ".", "");
			}
		}
		return str;
	}

	private static string GetIdFromRouteParts(List<string> parts, string pocoClassName)
	{
		List<string> lstId = new List<string>();
		string currentEntity = pocoClassName;

		foreach (string str in parts)
		{
			if (str.StartsWith("{") && str.EndsWith("}"))
			{
				if (currentEntity == pocoClassName)
				{
					string propName = str.Remove(0, 1); // Supprime le premier {
					propName = propName.Remove(propName.Length - 1, 1); // Supprime le dernier }
				
					lstId.Add(propName);
				}
			}
			else
			{
				currentEntity += str;
			}
		}

		string id = lstId.SingleOrDefault();
		return id ?? "";
	}
}
#>