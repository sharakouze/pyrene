

//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenCompteur"/>.
	/// </summary>
	public partial class GenCompteurService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteur"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenCompteur_TypCompteur_CleService_EstUnique(GenCompteur model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenCompteur>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenCompteur.TypCompteur), nameof(GenCompteur.CleService) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenCompteur t2 ON t2.CleCompteur=xxx [...]
					Expression<Func<GenCompteur, GenCompteur, bool>> joinExpr = (t1, t2)
						=> (t2.CleCompteur == model.CleCompteur);

					if (!fields.Contains(nameof(GenCompteur.TypCompteur), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.TypCompteur=t2.TypCompteur
						joinExpr = joinExpr.And((t1, t2) => t1.TypCompteur == t2.TypCompteur);
					}
					if (!fields.Contains(nameof(GenCompteur.CleService), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleService=t2.CleService
						joinExpr = joinExpr.And((t1, t2) => t1.CleService == t2.CleService);
					}

					q = q.Join<GenCompteur>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenCompteur.TypCompteur), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.TypCompteur == model.TypCompteur);
			}
			if (fields == null || fields.Contains(nameof(GenCompteur.CleService), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleService == model.CleService);
			}

			if (model.CleCompteur != 0)
			{
				q.Where(t1 => t1.CleCompteur != model.CleCompteur);
			}

			return !Db.Exists(q);
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteur"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenCompteur_CodCompteur_EstUnique(GenCompteur model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenCompteur>();

			if (fields == null || fields.Contains(nameof(GenCompteur.CodCompteur), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodCompteur == model.CodCompteur);
			}
			else
			{
				return true;
			}

			if (model.CleCompteur != 0)
			{
				q.Where(t1 => t1.CleCompteur != model.CleCompteur);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenCompteur request)
		{
			int count = Db.DeleteById<GenCompteur>(request.CleCompteur);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenCompteurValeur"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenCompteurValeur_CleCompteur_ValPeriode_EstUnique(GenCompteurValeur model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenCompteurValeur>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenCompteurValeur.CleCompteur), nameof(GenCompteurValeur.ValPeriode) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenCompteurValeur t2 ON t2.CleValeur=xxx [...]
					Expression<Func<GenCompteurValeur, GenCompteurValeur, bool>> joinExpr = (t1, t2)
						=> (t2.CleValeur == model.CleValeur);

					if (!fields.Contains(nameof(GenCompteurValeur.CleCompteur), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleCompteur=t2.CleCompteur
						joinExpr = joinExpr.And((t1, t2) => t1.CleCompteur == t2.CleCompteur);
					}
					if (!fields.Contains(nameof(GenCompteurValeur.ValPeriode), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.ValPeriode=t2.ValPeriode
						joinExpr = joinExpr.And((t1, t2) => t1.ValPeriode == t2.ValPeriode);
					}

					q = q.Join<GenCompteurValeur>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenCompteurValeur.CleCompteur), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleCompteur == model.CleCompteur);
			}
			if (fields == null || fields.Contains(nameof(GenCompteurValeur.ValPeriode), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.ValPeriode == model.ValPeriode);
			}

			if (model.CleValeur != 0)
			{
				q.Where(t1 => t1.CleValeur != model.CleValeur);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenCompteurValeur request)
		{
			int count = Db.DeleteById<GenCompteurValeur>(request.CleValeur);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteur"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenCompteur Post(GenCompteur request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenCompteur_TypCompteur_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}
				bool unique2 = GenCompteur_CodCompteur_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleCompteur = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenCompteur request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenCompteur_TypCompteur_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}
				bool unique2 = GenCompteur_CodCompteur_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteurValeur"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenCompteurValeur Post(GenCompteurValeur request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenCompteurValeur_CleCompteur_ValPeriode_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteurValeur)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleValeur = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenCompteurValeur request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenCompteurValeur_CleCompteur_ValPeriode_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteurValeur)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteur"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenCompteur Get(GetGenCompteur request)
		{
            ModelDefinitionHelper.UndefinedFields<GenCompteur>(request.Fields);

            var q = Db.From<GenCompteur>().Where(x => x.CleCompteur == request.CleCompteur).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenCompteurValeur"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenCompteurValeur Get(GetGenCompteurValeur request)
		{
            ModelDefinitionHelper.UndefinedFields<GenCompteurValeur>(request.Fields);

            var q = Db.From<GenCompteurValeur>().Where(x => x.CleValeur == request.CleValeur).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenCompteur request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenCompteur>(patchDic.Keys);

			var entity = new GenCompteur();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenCompteur>().Where(x => x.CleCompteur == request.CleCompteur).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenCompteur_TypCompteur_CleService_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}
				bool unique2 = GenCompteur_CodCompteur_EstUnique(entity, patchDic.Keys);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteur)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteur), request.CleCompteur));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenCompteurValeur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenCompteurValeur request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenCompteurValeur>(patchDic.Keys);

			var entity = new GenCompteurValeur();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenCompteurValeur>().Where(x => x.CleValeur == request.CleValeur).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenCompteurValeur_CleCompteur_ValPeriode_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenCompteurValeur)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenCompteurValeur), request.CleValeur));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenCompteur request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenCompteur>().Where(x => x.LibCompteur.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenCompteur"/>.
    /// </summary>
    public partial class GenCompteurValidator : AbstractValidator<GenCompteur>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenCompteurValidator" />.
        /// </summary>
        public GenCompteurValidator()
        {
            RuleFor(x => x.CodCompteur)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibCompteur)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtCompteur)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);
            RuleFor(x => x.ValFormatNumero)
                .NotEmpty()
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenExercice"/>.
	/// </summary>
	public partial class GenExerciceService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenExercice"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenExercice_CodExercice_EstUnique(GenExercice model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenExercice>();

			if (fields == null || fields.Contains(nameof(GenExercice.CodExercice), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodExercice == model.CodExercice);
			}
			else
			{
				return true;
			}

			if (model.CleExercice != 0)
			{
				q.Where(t1 => t1.CleExercice != model.CleExercice);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenExercice"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenExercice request)
		{
			int count = Db.DeleteById<GenExercice>(request.CleExercice);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenExercice), request.CleExercice));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenExercice"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenExercice"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenExercice Post(GenExercice request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenExercice_CodExercice_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenExercice)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleExercice = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenExercice"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenExercice request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenExercice_CodExercice_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenExercice)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenExercice), request.CleExercice));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenExercice"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenExercice"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenExercice Get(GetGenExercice request)
		{
            ModelDefinitionHelper.UndefinedFields<GenExercice>(request.Fields);

            var q = Db.From<GenExercice>().Where(x => x.CleExercice == request.CleExercice).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenExercice), request.CleExercice));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenExercice"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenExercice request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenExercice>(patchDic.Keys);

			var entity = new GenExercice();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenExercice>().Where(x => x.CleExercice == request.CleExercice).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenExercice_CodExercice_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenExercice)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenExercice), request.CleExercice));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenExercice request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenExercice>().Where(x => x.LibExercice.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenExercice"/>.
    /// </summary>
    public partial class GenExerciceValidator : AbstractValidator<GenExercice>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenExerciceValidator" />.
        /// </summary>
        public GenExerciceValidator()
        {
            RuleFor(x => x.CodExercice)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibExercice)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtExercice)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenFourn"/>.
	/// </summary>
	public partial class GenFournService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenFourn"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenFourn_CodFourn_EstUnique(GenFourn model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenFourn>();

			if (fields == null || fields.Contains(nameof(GenFourn.CodFourn), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodFourn == model.CodFourn);
			}
			else
			{
				return true;
			}

			if (model.CleFourn != 0)
			{
				q.Where(t1 => t1.CleFourn != model.CleFourn);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenFourn request)
		{
			int count = Db.DeleteById<GenFourn>(request.CleFourn);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFourn), request.CleFourn));
			}
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenFournBanque"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenFournBanque_CleFourn_CodIBAN_EstUnique(GenFournBanque model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenFournBanque>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenFournBanque.CleFourn), nameof(GenFournBanque.CodIBAN) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenFournBanque t2 ON t2.CleBanque=xxx [...]
					Expression<Func<GenFournBanque, GenFournBanque, bool>> joinExpr = (t1, t2)
						=> (t2.CleBanque == model.CleBanque);

					if (!fields.Contains(nameof(GenFournBanque.CleFourn), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleFourn=t2.CleFourn
						joinExpr = joinExpr.And((t1, t2) => t1.CleFourn == t2.CleFourn);
					}
					if (!fields.Contains(nameof(GenFournBanque.CodIBAN), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CodIBAN=t2.CodIBAN
						joinExpr = joinExpr.And((t1, t2) => t1.CodIBAN == t2.CodIBAN);
					}

					q = q.Join<GenFournBanque>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenFournBanque.CleFourn), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleFourn == model.CleFourn);
			}
			if (fields == null || fields.Contains(nameof(GenFournBanque.CodIBAN), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodIBAN == model.CodIBAN);
			}

			if (model.CleBanque != 0)
			{
				q.Where(t1 => t1.CleBanque != model.CleBanque);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenFournBanque"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenFournBanque request)
		{
			int count = Db.DeleteById<GenFournBanque>(request.CleBanque);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournBanque), request.CleBanque));
			}
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenFournContact"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenFournContact_CleFourn_NomContact_EstUnique(GenFournContact model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenFournContact>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenFournContact.CleFourn), nameof(GenFournContact.NomContact) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenFournContact t2 ON t2.CleContact=xxx [...]
					Expression<Func<GenFournContact, GenFournContact, bool>> joinExpr = (t1, t2)
						=> (t2.CleContact == model.CleContact);

					if (!fields.Contains(nameof(GenFournContact.CleFourn), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleFourn=t2.CleFourn
						joinExpr = joinExpr.And((t1, t2) => t1.CleFourn == t2.CleFourn);
					}
					if (!fields.Contains(nameof(GenFournContact.NomContact), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.NomContact=t2.NomContact
						joinExpr = joinExpr.And((t1, t2) => t1.NomContact == t2.NomContact);
					}

					q = q.Join<GenFournContact>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenFournContact.CleFourn), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleFourn == model.CleFourn);
			}
			if (fields == null || fields.Contains(nameof(GenFournContact.NomContact), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.NomContact == model.NomContact);
			}

			if (model.CleContact != 0)
			{
				q.Where(t1 => t1.CleContact != model.CleContact);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenFournContact"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenFournContact request)
		{
			int count = Db.DeleteById<GenFournContact>(request.CleContact);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournContact), request.CleContact));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFourn"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenFourn Post(GenFourn request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFourn_CodFourn_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFourn)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleFourn = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenFourn request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFourn_CodFourn_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFourn)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFourn), request.CleFourn));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenFournBanque"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournBanque"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenFournBanque Post(GenFournBanque request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFournBanque_CleFourn_CodIBAN_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournBanque)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleBanque = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenFournBanque"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenFournBanque request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFournBanque_CleFourn_CodIBAN_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournBanque)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournBanque), request.CleBanque));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenFournContact"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournContact"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenFournContact Post(GenFournContact request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFournContact_CleFourn_NomContact_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournContact)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleContact = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenFournContact"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenFournContact request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenFournContact_CleFourn_NomContact_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournContact)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournContact), request.CleContact));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFourn"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenFourn Get(GetGenFourn request)
		{
            ModelDefinitionHelper.UndefinedFields<GenFourn>(request.Fields);

            var q = Db.From<GenFourn>().Where(x => x.CleFourn == request.CleFourn).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFourn), request.CleFourn));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenFournBanque"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournBanque"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenFournBanque Get(GetGenFournBanque request)
		{
            ModelDefinitionHelper.UndefinedFields<GenFournBanque>(request.Fields);

            var q = Db.From<GenFournBanque>().Where(x => x.CleBanque == request.CleBanque).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournBanque), request.CleBanque));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenFournContact"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenFournContact"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenFournContact Get(GetGenFournContact request)
		{
            ModelDefinitionHelper.UndefinedFields<GenFournContact>(request.Fields);

            var q = Db.From<GenFournContact>().Where(x => x.CleContact == request.CleContact).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournContact), request.CleContact));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenFourn"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenFourn request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenFourn>(patchDic.Keys);

			var entity = new GenFourn();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenFourn>().Where(x => x.CleFourn == request.CleFourn).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenFourn_CodFourn_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFourn)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFourn), request.CleFourn));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenFournBanque"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenFournBanque request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenFournBanque>(patchDic.Keys);

			var entity = new GenFournBanque();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenFournBanque>().Where(x => x.CleBanque == request.CleBanque).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenFournBanque_CleFourn_CodIBAN_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournBanque)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournBanque), request.CleBanque));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenFournContact"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenFournContact request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenFournContact>(patchDic.Keys);

			var entity = new GenFournContact();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenFournContact>().Where(x => x.CleContact == request.CleContact).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenFournContact_CleFourn_NomContact_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenFournContact)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenFournContact), request.CleContact));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenFourn request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenFourn>().Where(x => x.LibFourn.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenFourn"/>.
    /// </summary>
    public partial class GenFournValidator : AbstractValidator<GenFourn>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenFournValidator" />.
        /// </summary>
        public GenFournValidator()
        {
            RuleFor(x => x.CodFourn)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibFourn)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtFourn)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);
            RuleFor(x => x.AdrRue)
                .Length(0, 200);
            RuleFor(x => x.AdrCode)
                .Length(0, 10);
            RuleFor(x => x.AdrCommune)
                .Length(0, 100);
            RuleFor(x => x.AdrPays)
                .Length(0, 100);
            RuleFor(x => x.NumTelep)
                .Length(0, 25);
            RuleFor(x => x.NumFax)
                .Length(0, 25);
            RuleFor(x => x.NumEmail)
                .Length(0, 100)
                .EmailAddress();
            RuleFor(x => x.CodCompta)
                .Length(0, 100);
            RuleFor(x => x.NumClient)
                .Length(0, 100);
            RuleFor(x => x.NumTVAIntra)
                .Length(0, 25);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenFournBanque"/>.
    /// </summary>
    public partial class GenFournBanqueValidator : AbstractValidator<GenFournBanque>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenFournBanqueValidator" />.
        /// </summary>
        public GenFournBanqueValidator()
        {
            RuleFor(x => x.CodIBAN)
                .NotEmpty()
                .Length(0, 34);
            RuleFor(x => x.CodBIC)
                .NotEmpty()
                .Length(0, 11);
            RuleFor(x => x.LibEtablissement)
                .NotEmpty()
                .Length(0, 200);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenFournContact"/>.
    /// </summary>
    public partial class GenFournContactValidator : AbstractValidator<GenFournContact>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenFournContactValidator" />.
        /// </summary>
        public GenFournContactValidator()
        {
            RuleFor(x => x.NomContact)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.PreContact)
                .Length(0, 100);
            RuleFor(x => x.TxtContact)
                .Length(0, 500);
            RuleFor(x => x.NumTelep)
                .Length(0, 25);
            RuleFor(x => x.NumFax)
                .Length(0, 25);
            RuleFor(x => x.NumEmail)
                .Length(0, 100)
                .EmailAddress();
            RuleFor(x => x.LibFonction)
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenMandat"/>.
	/// </summary>
	public partial class GenMandatService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenMandat"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenMandat_TypMandat_NivMandat_EstUnique(GenMandat model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenMandat>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenMandat.TypMandat), nameof(GenMandat.NivMandat) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenMandat t2 ON t2.CleMandat=xxx [...]
					Expression<Func<GenMandat, GenMandat, bool>> joinExpr = (t1, t2)
						=> (t2.CleMandat == model.CleMandat);

					if (!fields.Contains(nameof(GenMandat.TypMandat), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.TypMandat=t2.TypMandat
						joinExpr = joinExpr.And((t1, t2) => t1.TypMandat == t2.TypMandat);
					}
					if (!fields.Contains(nameof(GenMandat.NivMandat), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.NivMandat=t2.NivMandat
						joinExpr = joinExpr.And((t1, t2) => t1.NivMandat == t2.NivMandat);
					}

					q = q.Join<GenMandat>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenMandat.TypMandat), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.TypMandat == model.TypMandat);
			}
			if (fields == null || fields.Contains(nameof(GenMandat.NivMandat), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.NivMandat == model.NivMandat);
			}

			if (model.CleMandat != 0)
			{
				q.Where(t1 => t1.CleMandat != model.CleMandat);
			}

			return !Db.Exists(q);
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenMandat"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenMandat_CodMandat_EstUnique(GenMandat model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenMandat>();

			if (fields == null || fields.Contains(nameof(GenMandat.CodMandat), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodMandat == model.CodMandat);
			}
			else
			{
				return true;
			}

			if (model.CleMandat != 0)
			{
				q.Where(t1 => t1.CleMandat != model.CleMandat);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenMandat"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenMandat request)
		{
			int count = Db.DeleteById<GenMandat>(request.CleMandat);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandat), request.CleMandat));
			}
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenMandatMandataire"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenMandatMandataire_CleMandat_ClePersonne_CleService_EstUnique(GenMandatMandataire model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenMandatMandataire>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenMandatMandataire.CleMandat), nameof(GenMandatMandataire.ClePersonne), nameof(GenMandatMandataire.CleService) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenMandatMandataire t2 ON t2.CleMandataire=xxx [...]
					Expression<Func<GenMandatMandataire, GenMandatMandataire, bool>> joinExpr = (t1, t2)
						=> (t2.CleMandataire == model.CleMandataire);

					if (!fields.Contains(nameof(GenMandatMandataire.CleMandat), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleMandat=t2.CleMandat
						joinExpr = joinExpr.And((t1, t2) => t1.CleMandat == t2.CleMandat);
					}
					if (!fields.Contains(nameof(GenMandatMandataire.ClePersonne), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.ClePersonne=t2.ClePersonne
						joinExpr = joinExpr.And((t1, t2) => t1.ClePersonne == t2.ClePersonne);
					}
					if (!fields.Contains(nameof(GenMandatMandataire.CleService), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleService=t2.CleService
						joinExpr = joinExpr.And((t1, t2) => t1.CleService == t2.CleService);
					}

					q = q.Join<GenMandatMandataire>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenMandatMandataire.CleMandat), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleMandat == model.CleMandat);
			}
			if (fields == null || fields.Contains(nameof(GenMandatMandataire.ClePersonne), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.ClePersonne == model.ClePersonne);
			}
			if (fields == null || fields.Contains(nameof(GenMandatMandataire.CleService), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleService == model.CleService);
			}

			if (model.CleMandataire != 0)
			{
				q.Where(t1 => t1.CleMandataire != model.CleMandataire);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenMandatMandataire"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenMandatMandataire request)
		{
			int count = Db.DeleteById<GenMandatMandataire>(request.CleMandataire);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandatMandataire), request.CleMandataire));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenMandat"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenMandat"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenMandat Post(GenMandat request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenMandat_TypMandat_NivMandat_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}
				bool unique2 = GenMandat_CodMandat_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleMandat = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenMandat"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenMandat request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenMandat_TypMandat_NivMandat_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}
				bool unique2 = GenMandat_CodMandat_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandat), request.CleMandat));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenMandatMandataire"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenMandatMandataire"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenMandatMandataire Post(GenMandatMandataire request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenMandatMandataire_CleMandat_ClePersonne_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandatMandataire)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleMandataire = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenMandatMandataire"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenMandatMandataire request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenMandatMandataire_CleMandat_ClePersonne_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandatMandataire)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandatMandataire), request.CleMandataire));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenMandat"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenMandat"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenMandat Get(GetGenMandat request)
		{
            ModelDefinitionHelper.UndefinedFields<GenMandat>(request.Fields);

            var q = Db.From<GenMandat>().Where(x => x.CleMandat == request.CleMandat).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandat), request.CleMandat));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenMandatMandataire"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenMandatMandataire"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenMandatMandataire Get(GetGenMandatMandataire request)
		{
            ModelDefinitionHelper.UndefinedFields<GenMandatMandataire>(request.Fields);

            var q = Db.From<GenMandatMandataire>().Where(x => x.CleMandataire == request.CleMandataire).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandatMandataire), request.CleMandataire));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenMandat"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenMandat request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenMandat>(patchDic.Keys);

			var entity = new GenMandat();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenMandat>().Where(x => x.CleMandat == request.CleMandat).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenMandat_TypMandat_NivMandat_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}
				bool unique2 = GenMandat_CodMandat_EstUnique(entity, patchDic.Keys);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandat)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandat), request.CleMandat));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenMandatMandataire"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenMandatMandataire request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenMandatMandataire>(patchDic.Keys);

			var entity = new GenMandatMandataire();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenMandatMandataire>().Where(x => x.CleMandataire == request.CleMandataire).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenMandatMandataire_CleMandat_ClePersonne_CleService_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenMandatMandataire)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenMandatMandataire), request.CleMandataire));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenMandat request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenMandat>().Where(x => x.LibMandat.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenMandat"/>.
    /// </summary>
    public partial class GenMandatValidator : AbstractValidator<GenMandat>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenMandatValidator" />.
        /// </summary>
        public GenMandatValidator()
        {
            RuleFor(x => x.CodMandat)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibMandat)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtMandat)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenPersonne"/>.
	/// </summary>
	public partial class GenPersonneService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenPersonne"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenPersonne_CodPersonne_EstUnique(GenPersonne model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenPersonne>();

			if (fields == null || fields.Contains(nameof(GenPersonne.CodPersonne), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodPersonne == model.CodPersonne);
			}
			else
			{
				return true;
			}

			if (model.ClePersonne != 0)
			{
				q.Where(t1 => t1.ClePersonne != model.ClePersonne);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenPersonne request)
		{
			int count = Db.DeleteById<GenPersonne>(request.ClePersonne);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonne), request.ClePersonne));
			}
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenPersonneProfil"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenPersonneProfil_ClePersonne_CleService_EstUnique(GenPersonneProfil model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenPersonneProfil>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenPersonneProfil.ClePersonne), nameof(GenPersonneProfil.CleService) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenPersonneProfil t2 ON t2.CleProfil=xxx [...]
					Expression<Func<GenPersonneProfil, GenPersonneProfil, bool>> joinExpr = (t1, t2)
						=> (t2.CleProfil == model.CleProfil);

					if (!fields.Contains(nameof(GenPersonneProfil.ClePersonne), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.ClePersonne=t2.ClePersonne
						joinExpr = joinExpr.And((t1, t2) => t1.ClePersonne == t2.ClePersonne);
					}
					if (!fields.Contains(nameof(GenPersonneProfil.CleService), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CleService=t2.CleService
						joinExpr = joinExpr.And((t1, t2) => t1.CleService == t2.CleService);
					}

					q = q.Join<GenPersonneProfil>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenPersonneProfil.ClePersonne), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.ClePersonne == model.ClePersonne);
			}
			if (fields == null || fields.Contains(nameof(GenPersonneProfil.CleService), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CleService == model.CleService);
			}

			if (model.CleProfil != 0)
			{
				q.Where(t1 => t1.CleProfil != model.CleProfil);
			}

			return !Db.Exists(q);
		}

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenPersonneProfil"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenPersonneProfil_CodProfil_ClePersonne_EstUnique(GenPersonneProfil model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenPersonneProfil>();

			if (fields != null)
			{
				var uniqueFields = new[] { nameof(GenPersonneProfil.CodProfil), nameof(GenPersonneProfil.ClePersonne) };
				if (fields.Any(f => uniqueFields.Contains(f, StringComparer.OrdinalIgnoreCase)))
				{
					// INNER JOIN GenPersonneProfil t2 ON t2.CleProfil=xxx [...]
					Expression<Func<GenPersonneProfil, GenPersonneProfil, bool>> joinExpr = (t1, t2)
						=> (t2.CleProfil == model.CleProfil);

					if (!fields.Contains(nameof(GenPersonneProfil.CodProfil), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.CodProfil=t2.CodProfil
						joinExpr = joinExpr.And((t1, t2) => t1.CodProfil == t2.CodProfil);
					}
					if (!fields.Contains(nameof(GenPersonneProfil.ClePersonne), StringComparer.OrdinalIgnoreCase))
					{
						// [...] AND t1.ClePersonne=t2.ClePersonne
						joinExpr = joinExpr.And((t1, t2) => t1.ClePersonne == t2.ClePersonne);
					}

					q = q.Join<GenPersonneProfil>(joinExpr, Db.JoinAlias("t2"));
				}
				else
				{
					return true;
				}
			}
			
			if (fields == null || fields.Contains(nameof(GenPersonneProfil.CodProfil), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodProfil == model.CodProfil);
			}
			if (fields == null || fields.Contains(nameof(GenPersonneProfil.ClePersonne), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.ClePersonne == model.ClePersonne);
			}

			if (model.CleProfil != 0)
			{
				q.Where(t1 => t1.CleProfil != model.CleProfil);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenPersonneProfil"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenPersonneProfil request)
		{
			int count = Db.DeleteById<GenPersonneProfil>(request.CleProfil);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneProfil), request.CleProfil));
			}
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenPersonneSignature"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenPersonneSignature request)
		{
			int count = Db.DeleteById<GenPersonneSignature>(request.ClePersonne);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneSignature), request.ClePersonne));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonne"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenPersonne Post(GenPersonne request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenPersonne_CodPersonne_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonne)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.ClePersonne = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenPersonne request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenPersonne_CodPersonne_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonne)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonne), request.ClePersonne));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenPersonneProfil"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonneProfil"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenPersonneProfil Post(GenPersonneProfil request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenPersonneProfil_ClePersonne_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}
				bool unique2 = GenPersonneProfil_CodProfil_ClePersonne_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleProfil = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenPersonneProfil"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenPersonneProfil request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenPersonneProfil_ClePersonne_CleService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}
				bool unique2 = GenPersonneProfil_CodProfil_ClePersonne_EstUnique(request);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneProfil), request.CleProfil));
				}
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenPersonneSignature"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonneSignature"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenPersonneSignature Post(GenPersonneSignature request)
		{
			lock (_syncLock)
			{

				long id = Db.Insert(request, selectIdentity: true);
				request.ClePersonne = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenPersonneSignature"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenPersonneSignature request)
		{
			lock (_syncLock)
			{

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneSignature), request.ClePersonne));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonne"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenPersonne Get(GetGenPersonne request)
		{
            ModelDefinitionHelper.UndefinedFields<GenPersonne>(request.Fields);

            var q = Db.From<GenPersonne>().Where(x => x.ClePersonne == request.ClePersonne).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonne), request.ClePersonne));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenPersonneProfil"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonneProfil"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenPersonneProfil Get(GetGenPersonneProfil request)
		{
            ModelDefinitionHelper.UndefinedFields<GenPersonneProfil>(request.Fields);

            var q = Db.From<GenPersonneProfil>().Where(x => x.CleProfil == request.CleProfil).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneProfil), request.CleProfil));
			}

			return entity;
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenPersonneSignature"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenPersonneSignature"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenPersonneSignature Get(GetGenPersonneSignature request)
		{
            ModelDefinitionHelper.UndefinedFields<GenPersonneSignature>(request.Fields);

            var q = Db.From<GenPersonneSignature>().Where(x => x.ClePersonne == request.ClePersonne).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneSignature), request.ClePersonne));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenPersonne"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenPersonne request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenPersonne>(patchDic.Keys);

			var entity = new GenPersonne();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenPersonne>().Where(x => x.ClePersonne == request.ClePersonne).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenPersonne_CodPersonne_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonne)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonne), request.ClePersonne));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenPersonneProfil"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenPersonneProfil request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenPersonneProfil>(patchDic.Keys);

			var entity = new GenPersonneProfil();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenPersonneProfil>().Where(x => x.CleProfil == request.CleProfil).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenPersonneProfil_ClePersonne_CleService_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}
				bool unique2 = GenPersonneProfil_CodProfil_ClePersonne_EstUnique(entity, patchDic.Keys);
				if (!unique2)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenPersonneProfil)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneProfil), request.CleProfil));
				}
			}
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenPersonneSignature"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenPersonneSignature request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenPersonneSignature>(patchDic.Keys);

			var entity = new GenPersonneSignature();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenPersonneSignature>().Where(x => x.ClePersonne == request.ClePersonne).Update(patchDic.Keys);

			lock (_syncLock)
			{

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenPersonneSignature), request.ClePersonne));
				}
			}
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenPersonne"/>.
    /// </summary>
    public partial class GenPersonneValidator : AbstractValidator<GenPersonne>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenPersonneValidator" />.
        /// </summary>
        public GenPersonneValidator()
        {
            RuleFor(x => x.CodPersonne)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.NomPersonne)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.PrePersonne)
                .Length(0, 100);
            RuleFor(x => x.TxtPersonne)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);
            RuleFor(x => x.NumTelep)
                .Length(0, 25);
            RuleFor(x => x.NumFax)
                .Length(0, 25);
            RuleFor(x => x.NumEmail)
                .Length(0, 100)
                .EmailAddress();

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenPersonneProfil"/>.
    /// </summary>
    public partial class GenPersonneProfilValidator : AbstractValidator<GenPersonneProfil>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenPersonneProfilValidator" />.
        /// </summary>
        public GenPersonneProfilValidator()
        {
            RuleFor(x => x.CodProfil)
                .NotEmpty()
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenPersonneSignature"/>.
    /// </summary>
    public partial class GenPersonneSignatureValidator : AbstractValidator<GenPersonneSignature>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenPersonneSignatureValidator" />.
        /// </summary>
        public GenPersonneSignatureValidator()
        {
            RuleFor(x => x.TypMime)
                .NotEmpty()
                .Length(0, 255);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenService"/>.
	/// </summary>
	public partial class GenServiceService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenService"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenService_CodService_EstUnique(GenService model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenService>();

			if (fields == null || fields.Contains(nameof(GenService.CodService), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodService == model.CodService);
			}
			else
			{
				return true;
			}

			if (model.CleService != 0)
			{
				q.Where(t1 => t1.CleService != model.CleService);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenService"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenService request)
		{
			int count = Db.DeleteById<GenService>(request.CleService);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenService), request.CleService));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenService"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenService"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenService Post(GenService request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenService_CodService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenService)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleService = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenService"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenService request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenService_CodService_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenService)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenService), request.CleService));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenService"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenService"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenService Get(GetGenService request)
		{
            ModelDefinitionHelper.UndefinedFields<GenService>(request.Fields);

            var q = Db.From<GenService>().Where(x => x.CleService == request.CleService).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenService), request.CleService));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenService"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenService request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenService>(patchDic.Keys);

			var entity = new GenService();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenService>().Where(x => x.CleService == request.CleService).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenService_CodService_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenService)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenService), request.CleService));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenService request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenService>().Where(x => x.LibService.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenService"/>.
    /// </summary>
    public partial class GenServiceValidator : AbstractValidator<GenService>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenServiceValidator" />.
        /// </summary>
        public GenServiceValidator()
        {
            RuleFor(x => x.CodService)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibService)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtService)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);
            RuleFor(x => x.AdrRue)
                .Length(0, 200);
            RuleFor(x => x.AdrCode)
                .Length(0, 10);
            RuleFor(x => x.AdrCommune)
                .Length(0, 100);
            RuleFor(x => x.AdrPays)
                .Length(0, 100);
            RuleFor(x => x.NumTelep)
                .Length(0, 25);
            RuleFor(x => x.NumFax)
                .Length(0, 25);
            RuleFor(x => x.NumEmail)
                .Length(0, 100)
                .EmailAddress();

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="GenTVA"/>.
	/// </summary>
	public partial class GenTVAService : Service
	{
		private static readonly object _syncLock = new object();

        /// <summary>
		/// Teste l'unicité d'un <see cref="GenTVA"/>.
        /// </summary>
        /// <param name="model"></param>
        /// <param name="fields"></param>
        /// <returns></returns>
		protected bool GenTVA_CodTVA_EstUnique(GenTVA model, IEnumerable<string> fields = null)
		{
			var q = Db.From<GenTVA>();

			if (fields == null || fields.Contains(nameof(GenTVA.CodTVA), StringComparer.OrdinalIgnoreCase))
			{
				q.Where(t1 => t1.CodTVA == model.CodTVA);
			}
			else
			{
				return true;
			}

			if (model.CleTVA != 0)
			{
				q.Where(t1 => t1.CleTVA != model.CleTVA);
			}

			return !Db.Exists(q);
		}

		/// <summary>
		/// Supprime la ressource <see cref="GenTVA"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public void Delete(DeleteGenTVA request)
		{
			int count = Db.DeleteById<GenTVA>(request.CleTVA);
			if (count == 0)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenTVA), request.CleTVA));
			}
		}

		/// <summary>
		/// Ajoute la ressource <see cref="GenTVA"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenTVA"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public GenTVA Post(GenTVA request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenTVA_CodTVA_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenTVA)));
				}

				long id = Db.Insert(request, selectIdentity: true);
				request.CleTVA = (int)id;

				return request;
			}
		}

		/// <summary>
		/// Remplace la ressource <see cref="GenTVA"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Put(GenTVA request)
		{
			lock (_syncLock)
			{
				bool unique1 = GenTVA_CodTVA_EstUnique(request);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenTVA)));
				}

				int count = Db.Update(request);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenTVA), request.CleTVA));
				}
			}
		}

		/// <summary>
		/// Retourne la ressource <see cref="GenTVA"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="GenTVA"/> trouvée.</returns>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		public GenTVA Get(GetGenTVA request)
		{
            ModelDefinitionHelper.UndefinedFields<GenTVA>(request.Fields);

            var q = Db.From<GenTVA>().Where(x => x.CleTVA == request.CleTVA).Select(request.Fields);

			var entity = Db.Single(q);
			if (entity == null)
			{
				throw HttpError.NotFound(
					string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenTVA), request.CleTVA));
			}

			return entity;
		}

		/// <summary>
		/// Met à jour la ressource <see cref="GenTVA"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <exception cref="ArgumentNullException"></exception>
		/// <exception cref="ArgumentException">La ressource ne contient pas tous les champs spécifiés.</exception>
		/// <exception cref="HttpError.NotFound">La ressource spécifiée est introuvable.</exception>
		/// <exception cref="HttpError.Conflict"></exception>
		public void Patch(PatchGenTVA request)
		{
			if (request.Fields.IsNullOrEmpty())
			{
				throw new ArgumentNullException(nameof(request.Fields));
			}

            var patchDic = request.Fields.ToDictionary(f => f.Field, f => f.Value);

            ModelDefinitionHelper.UndefinedFields<GenTVA>(patchDic.Keys);

			var entity = new GenTVA();
			PatchHelper.PopulateFromPatch(entity, patchDic);

			var q = Db.From<GenTVA>().Where(x => x.CleTVA == request.CleTVA).Update(patchDic.Keys);

			lock (_syncLock)
			{
				bool unique1 = GenTVA_CodTVA_EstUnique(entity, patchDic.Keys);
				if (!unique1)
				{
					throw HttpError.Conflict(
						string.Format(ServiceErrorMessages.ResourceNotUnique, nameof(GenTVA)));
				}

				int count = Db.UpdateOnly(entity, q);
				if (count == 0)
				{
					throw HttpError.NotFound(
						string.Format(ServiceErrorMessages.ResourceByIdNotFound, nameof(GenTVA), request.CleTVA));
				}
			}
		}

		/// <summary>
		/// Retourne le résultat d'une recherche.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns></returns>
		public List<BasicEntity> Get(SearchGenTVA request)
		{
			if (string.IsNullOrWhiteSpace(request.Text))
			{
				return null;
			}

            var q = Db.From<GenTVA>().Where(x => x.LibTVA.Contains(request.Text));
            if (request.Max > 0)
            {
                q = q.Limit(request.Max);
            }

            var items = Db.Select<BasicEntity>(q);
            return items;
		}

	}
}
using ServiceStack.FluentValidation;
using Tmpi.Pyrene.ServiceModel;
using Tmpi.Pyrene.ServiceModel.Types;

namespace Tmpi.Pyrene.ServiceInterface
{
    /// <summary>
    /// Validation pour la requête <see cref="GenTVA"/>.
    /// </summary>
    public partial class GenTVAValidator : AbstractValidator<GenTVA>
    {
        /// <summary>
        /// Initialise une nouvelle instance de la classe <see cref="GenTVAValidator" />.
        /// </summary>
        public GenTVAValidator()
        {
            RuleFor(x => x.CodTVA)
                .NotEmpty()
                .Length(0, 100);
            RuleFor(x => x.LibTVA)
                .NotEmpty()
                .Length(0, 200);
            RuleFor(x => x.TxtTVA)
                .Length(0, 500);
            RuleFor(x => x.CodExterne)
                .Length(0, 100);

            SetRules();
        }
        
        /// <summary>
        /// Définit des règles de validation supplémentaires.
        /// </summary>
        partial void SetRules();
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Messages;
using Tmpi.Pyrene.ServiceModel.Types;
using Tmpi.Pyrene.Infrastructure;
using Tmpi.Pyrene.Infrastructure.Linq;

namespace Tmpi.Pyrene.ServiceInterface
{
	/// <summary>
	/// Service qui traite les requêtes sur les ressources <see cref="SelectGenCompteur"/>.
	/// </summary>
	public partial class SelectGenCompteurService : Service
	{
		private static readonly object _syncLock = new object();

		/// <summary>
		/// Ajoute la ressource <see cref="SelectGenCompteur"/> spécifiée dans la requête.
		/// </summary>
		/// <param name="request">Requête à traiter.</param>
		/// <returns>Ressource <see cref="SelectGenCompteur"/> ajoutée.</returns>
		/// <exception cref="HttpError.Conflict"></exception>
		public SelectGenCompteur Post(SelectGenCompteur request)
		{
			lock (_syncLock)
			{

				long id = Db.Insert(request, selectIdentity: true);
				request.