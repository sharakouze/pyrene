<#@ template language="C#" hostspecific="true" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	// ----- Settings START -----
	string Namespace = ""; // vide = DefaultNamespace
	string SourceProject = "Tmpi.Pyrene.ServiceModel";
	string SourceNamespace = "Tmpi.Pyrene.ServiceModel.Messages";
	bool MakeClassesPartial = true;
	bool SplitIntoMultipleFiles = true;
	Regex ClassFilterInclude = null;
	Regex ClassFilterExclude = null;
	// ----- Settings END -----

	// get a reference to the project of this t4 template
	var project = VisualStudioHelper.CurrentProject;

	// namespace
	var fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		var defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var fullPath = project.Properties.Item("FullPath").Value.ToString();
		if (fullPath.EndsWith("\\"))
        {
			fullPath = fullPath.Substring(0, fullPath.Length - 1);
        }
		var templateDir = Path.GetDirectoryName(Host.TemplateFile);
		var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
		fileNamespace = string.Concat(defaultNamespace, subNamespace);
	}

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Diagnostics;
using ServiceStack;
using ServiceStack.OrmLite;
using Tmpi.Pyrene.ServiceModel.Types;
<#
	if (!string.IsNullOrWhiteSpace(SourceNamespace) && (SourceNamespace != fileNamespace))
	{
#>
using <#= SourceNamespace #>;

<#
	} // end if
#>
namespace <#= fileNamespace #>
{
<#
	manager.EndBlock(); // end header

	var srcProject = project;
	if (!string.IsNullOrWhiteSpace(SourceNamespace))
    {
		srcProject = VisualStudioHelper.GetProject(SourceProject);
    }
    
	var dic = new Dictionary<string, List<string>>();

    // get all class items from the code model
    var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(srcProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);
	if (!string.IsNullOrWhiteSpace(SourceNamespace))
    {
		allClasses = allClasses.Where(c => c.FullName.StartsWith(SourceNamespace)).ToList();
    }
	allClasses = allClasses.OrderBy(c => c.Name).ToList();
	// iterate all classes
    foreach (EnvDTE.CodeClass codeClass in allClasses)
    {
		var included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		var excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
        {
			continue;
        }

		var baseClass = VisualStudioHelper.CodeModel.GetBaseClass(codeClass);
		if (baseClass != null)
        {
			string entityName = null;

			switch (baseClass.Name)
            {
				case "GetByIdRequestBase":
					entityName = codeClass.Name.Substring(3);
					break;
				
				case "DeleteByIdRequestBase":
					entityName = codeClass.Name.Substring(6);
					break;

				case "SaveRequestBase":
					entityName = codeClass.Name.Substring(4);
					break;

				case "AutocompleteRequestBase":
					entityName = codeClass.Name.Substring(12);
					break;
            }

			if (!string.IsNullOrEmpty(entityName))
            {
				if (dic.Any(d => entityName.StartsWith(d.Key)))
				{
					var kvp = dic.Single(d => entityName.StartsWith(d.Key));
					kvp.Value.Add(codeClass.Name);
				}
				else
				{
					dic.Add(entityName, new List<string>(new[] { codeClass.Name } ));
				}
            }
        }
    } // end foreach

	var classDefinitionWords = new List<string>();
	classDefinitionWords.Add("public");
	if (MakeClassesPartial)
    {
		classDefinitionWords.Add("partial");
    }

	int CPT_MAX = 0;

	foreach (var kvp in dic)
	{
		var serviceClassName = kvp.Key + "Service";
		manager.StartNewFile(serviceClassName + ".generated.cs");
#>
    [Authenticate]
	<#= string.Join(" ", classDefinitionWords) #> class <#= serviceClassName #> : Service
	{
<#
		foreach (string requestName in kvp.Value)
        {
			if (CPT_MAX >= 10)
			{
				//continue; // limitation version démo de ServiceStack
			}

			if (requestName.StartsWith("Autocomplete"))
            {
				var entityName = requestName.Substring(12);
#>
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
		public List<string> Get(<#= requestName #> request)
		{
            if (string.IsNullOrWhiteSpace(request.Text))
            {
                return null;
            }
			return null;
		}

<#
            }
			else if (requestName.StartsWith("Get"))
            {
				var entityName = requestName.Substring(3);
#>
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
		public <#= entityName #> Get(<#= requestName #> request)
		{
            var entity = Db.SingleById<<#= entityName #>>(request.Id);
			if (entity == null)
			{
				throw HttpError.NotFound("");
			}
			return entity;
		}

<#
            }
			else if (requestName.StartsWith("Delete"))
            {
				var entityName = requestName.Substring(6);
#>
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
		public void Delete(<#= requestName #> request)
		{
			int count = Db.DeleteById<<#= entityName #>>(request.Id);
			if (count == 0)
			{
				throw HttpError.NotFound("");
			}
		}

<#
            }
			else if (requestName.StartsWith("Save"))
            {
#>
        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
		public void Any(<#= requestName #> request)
		{
			if (request.Id == 0)
            {
                Db.Insert(request.Entity);
            }
            else
            {
                Db.Update(request.Entity);
            }
		}

<#
            }
			
			CPT_MAX++;
        } // end foreach
#>
	}
<#
		manager.EndBlock();
    }

	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer

	manager.Process(SplitIntoMultipleFiles);
#>
