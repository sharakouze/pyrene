<#@ template language="C#" hostspecific="true" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	// ----- Settings START -----
	string Namespace = ""; // vide = DefaultNamespace
	string SourceProject = "Tmpi.Pyrene.ServiceModel";
	string SourceNamespace = "Tmpi.Pyrene.ServiceModel.Messages";
	bool MakeClassesPartial = true;
	bool SplitIntoMultipleFiles = true;
	Regex ClassFilterInclude = null;
	Regex ClassFilterExclude = null;
	// ----- Settings END -----

	// get a reference to the project of this t4 template
	var project = VisualStudioHelper.CurrentProject;

	// namespace
	var fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		var defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var fullPath = project.Properties.Item("FullPath").Value.ToString();
		if (fullPath.EndsWith("\\"))
        {
			fullPath = fullPath.Substring(0, fullPath.Length - 1);
        }
		var templateDir = Path.GetDirectoryName(Host.TemplateFile);
		var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
		fileNamespace = string.Concat(defaultNamespace, subNamespace);
	}

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	if (!string.IsNullOrWhiteSpace(SourceNamespace) && (SourceNamespace != fileNamespace))
	{
#>
using <#= SourceNamespace #>;

<#
	} // end if
#>
namespace <#= fileNamespace #>
{
<#
	manager.EndBlock(); // end header

	var srcProject = VisualStudioHelper.GetProject(SourceProject);
    
	var lstServiceClass = new List<string>();
	var lstMessageClass = new List<string>();

    // get all class items from the code model
    var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(srcProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);
	if (!string.IsNullOrWhiteSpace(SourceNamespace))
    {
		allClasses = allClasses.Where(c => c.FullName.StartsWith(SourceNamespace)).ToList();
    }
	// iterate all classes
    foreach (EnvDTE.CodeClass codeClass in allClasses)
    {
		var included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		var excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
        {
			continue;
        }

		var baseClass = VisualStudioHelper.CodeModel.GetBaseClass(codeClass);
		if (baseClass != null)
        {
			if (baseClass.Name == "GetByIdRequestBase" || baseClass.Name == "DeleteByIdRequestBase")
            {
				lstMessageClass.Add(codeClass.Name);
            }
        }
    } // end foreach

	lstMessageClass.Sort();
	foreach(var msg in lstMessageClass)
    {
#>
<#= msg #>
<#
    }

	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer

	manager.Process(SplitIntoMultipleFiles);
#>
