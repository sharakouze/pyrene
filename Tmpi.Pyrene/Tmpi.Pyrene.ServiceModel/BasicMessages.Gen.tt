<#@ template language="C#" hostspecific="true" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	/***** TODO *****
	- ApiAttribute + ApiMemberAttribute
	****************/

	// ----- Settings START -----
	string Namespace = ""; // vide = DefaultNamespace
	string SourceNamespace = "Tmpi.Pyrene.ServiceModel.Types";
	bool MakeClassesPartial = true;
	bool SplitIntoMultipleFiles = true;
	bool AddRoutes = true;
	Regex ClassFilterInclude = new Regex("^Gen", RegexOptions.IgnoreCase);
	Regex ClassFilterExclude = null;
	// ----- Settings END -----

	// get a reference to the project of this t4 template
	var project = VisualStudioHelper.CurrentProject;

	// namespace
	var fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		var defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var fullPath = project.Properties.Item("FullPath").Value.ToString();
		if (fullPath.EndsWith("\\"))
        {
			fullPath = fullPath.Substring(0, fullPath.Length - 1);
        }
		var templateDir = Path.GetDirectoryName(Host.TemplateFile);
		var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
		fileNamespace = string.Concat(defaultNamespace, subNamespace);
	}

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using ServiceStack;
<#
	if (!string.IsNullOrWhiteSpace(SourceNamespace) && (SourceNamespace != fileNamespace))
	{
#>
using <#= SourceNamespace #>;

<#
	} // end if
#>
namespace <#= fileNamespace #>
{
<#
	manager.EndBlock(); // end header
    
    // get all class items from the code model
    var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);
	if (!string.IsNullOrWhiteSpace(SourceNamespace))
    {
		allClasses = allClasses.Where(c => c.FullName.StartsWith(SourceNamespace)).ToList();
    }
	// iterate all classes
    foreach (EnvDTE.CodeClass codeClass in allClasses)
    {
		var included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		var excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
        {
			continue;
        }

		var classDefinitionWords = new List<string>();
		classDefinitionWords.Add("public");
		if (MakeClassesPartial)
		{
			classDefinitionWords.Add("partial");
		}

        // get all interfaces implemented by this class
		var allInterfaces = VisualStudioHelper.CodeModel.GetAllImplementedInterfaces(codeClass);
		if (allInterfaces.Any(i => i.FullName == "ServiceStack.Model.IHasId<System.Int32>" || i.FullName == "ServiceStack.Model.IHasIntId"))
        {
			var getByIdClassName = "Get" + codeClass.Name;
			var getByIdDescription = "Retourne une entité {0} à partir de son Id.";
            manager.StartNewFile(getByIdClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(getByIdDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRoutes)
            {
#>
	[Route("/<#= codeClass.Name #>/{Id}", "GET", Summary = "<#= string.Format(getByIdDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	<#= string.Join(" ", classDefinitionWords) #> class <#= getByIdClassName #> : GetByIdRequestBase<<#= codeClass.Name #>>
	{
	}
<#
			manager.EndBlock(); // end newfile

			var deleteByIdClassName = "Delete" + codeClass.Name;
			var deleteByIdDescription = "Supprime une entité {0} à partir de son Id.";
            manager.StartNewFile(deleteByIdClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(deleteByIdDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRoutes)
            {
#>
	[Route("/<#= codeClass.Name #>/{Id}", "DELETE", Summary = "<#= string.Format(deleteByIdDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	<#= string.Join(" ", classDefinitionWords) #> class <#= deleteByIdClassName #> : DeleteByIdRequestBase
	{
	}
<#
			manager.EndBlock(); // end newfile

			var patchClassName = "Patch" + codeClass.Name;
			var patchDescription = "Modifie une entité {0} à partir de son Id.";
            manager.StartNewFile(patchClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(patchDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRoutes)
            {
#>
	[Route("/<#= codeClass.Name #>/{Id}", "PATCH", Summary = "<#= string.Format(patchDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	<#= string.Join(" ", classDefinitionWords) #> class <#= patchClassName #> : PatchByIdRequestBase
	{
	}
<#
			manager.EndBlock(); // end newfile
        } // end if
		if (allInterfaces.Any(i => i.FullName == "Tmpi.Pyrene.ServiceModel.Types.IHasCodLibTxt"))
        {
			var autocompleteClassName = "Autocomplete" + codeClass.Name;
			var autocompleteDescription = "Autocomplete une entité {0}.";
            manager.StartNewFile(autocompleteClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(autocompleteDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRoutes)
            {
#>
	[Route("/<#= codeClass.Name #>/Autocomplete", "GET", Summary = "<#= string.Format(autocompleteDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	<#= string.Join(" ", classDefinitionWords) #> class <#= autocompleteClassName #> : AutocompleteRequestBase
	{
	}
<#
			manager.EndBlock(); // end newfile
		} // end if
    } // end foreach

	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer

	manager.Process(SplitIntoMultipleFiles);
#>
