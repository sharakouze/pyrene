<#@ template language="C#" hostspecific="true" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#@ include file="OrmLite.Core.ttinclude" #>
<#
	// ----- Settings START -----
	ConnectionStringName = "PyreneModel";			// Uses last connection string in config if not specified
	Namespace = "";
	ClassPrefix = "";
	ClassSuffix = "";
	bool MakeClassesPartial = true;
	bool SplitIntoMultipleFiles = true;		// if true: Generates one file for every class
	bool MakeSingular = false;			// if true: Changes the classname to singular if tablename is not singular
	bool UseIdAsPK = true;				// if true: Changes the primary key property name to Id
	bool GenerateEmptyConstructor = false;		// if true: Generates the default empty constructor
	bool UseSchemaAttribute = true;		// if true: Adds explicit '[Schema]' attribute
	bool CreateAutoQueryTypes = false; //if true: Will create <TypeName>Query types with all possible search fields explicitly typed
	bool AddNamedConnection = false; //if true: Adds NamedConnection attribute so AutoQuery will override default IDbConnection
	bool IncludeReferences = true; //if true: Addes References(typeof(ReferenceTableType)) to FKs
	string UseSpecificNamedConnection = ""; //if not null: Will use name provided as NamedConnection and AddNamedConnection = true, else ConnectionStringName is used as default NamedConnection
	// ----- Settings END -----

    // Read schema
	var tables = LoadTables(MakeSingular);


/*
	// Tweak Schema
	tables["tablename"].Ignore = true;							// To ignore a table
	tables["tablename"].ClassName = "newname";					// To change the class name of a table
	tables["tablename"]["columnname"].Ignore = true;			// To ignore a column
	tables["tablename"]["columnname"].PropertyName="newname";	// To change the property name of a column
	tables["tablename"]["columnname"].PropertyType="bool";		// To change the property type of a column
*/

	tables["GenCompteur"]["TypCompteur"].PropertyType = "TypCompteur";
	tables["GenCompteur"]["TypPeriodicite"].PropertyType = "TypPeriodicite";
	tables["GenMandat"]["TypMandat"].PropertyType = "TypMandat";
	tables["GenPersonne"]["TypGenre"].PropertyType = "TypGenre";
	tables["GenFournContact"]["TypGenre"].PropertyType = "TypGenre";

	// get a reference to the project of this t4 template
	var project = VisualStudioHelper.CurrentProject;

	// namespace
	var fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
	{
		var defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var fullPath = project.Properties.Item("FullPath").Value.ToString();
		if (fullPath.EndsWith("\\"))
		{
			fullPath = fullPath.Substring(0, fullPath.Length - 1);
		}
		var templateDir = Path.GetDirectoryName(Host.TemplateFile);
		var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
		fileNamespace = string.Concat(defaultNamespace, subNamespace);
	}

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using ServiceStack;
using ServiceStack.DataAnnotations;
using ServiceStack.Model;

namespace <#= fileNamespace #>
{
<#
	manager.EndBlock(); // end header

	foreach (Table tbl in tables)
	{
		if (tbl.Ignore)
		{
			continue;
		}

		manager.StartNewFile(tbl.Name + ".generated.cs");

		if (CreateAutoQueryTypes && AddNamedConnection)
		{
#>
	[NamedConnection("<#= !string.IsNullOrEmpty(UseSpecificNamedConnection) ? UseSpecificNamedConnection : ConnectionStringName #>")]
<#
		} // end if

		if (MakeSingular)
		{
#>
	[Alias("<#= tbl.Name #>")]
<#
		} // end if
		
		if (UseSchemaAttribute && !string.IsNullOrEmpty(tbl.Schema) && tbl.Schema != "dbo")
		{
#>
	[Schema("<#= tbl.Schema #>")]
<#
		} // end if

		var words = new List<string>();
		words.Add("public");
		if (MakeClassesPartial)
        {
			words.Add("partial");
        }
		words.Add("class");
		words.Add(tbl.ClassName);
		if (tbl.HasPK() && UseIdAsPK)
        {
			words.Add(":");
			words.Add("IHasId<" + tbl.PK.PropertyType + ">");
        }
#>	
	<#= string.Join(" ", words) #>
	{
<#
		if (GenerateEmptyConstructor)
		{
#>
        /// <summary>
        /// Initialise une nouvelle instance de la classe.
        /// </summary>
		public <#= tbl.ClassName #>()
		{
		}
<#
		} // end if

		var priorProperyNames = new List<string>();
		foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
		{
			if (priorProperyNames.Contains(col.PropertyName)) //Change duplicate style names
			{
				col.PropertyName = "_" + col.PropertyName;
			}
			priorProperyNames.Add(col.PropertyName);
			if ((col.Name!=col.PropertyName) || (col.IsPK && UseIdAsPK))
			{
#>
        [Alias("<#=col.Name#>")]
<#
			}
			if (col.PropertyType == "string" && col.Size > 0)
			{
#>
        [StringLength(<#=col.Size#>)]
<#
			}
			if (col.IsAutoIncrement)
			{
#>
        [AutoIncrement]
<#
			}
			if (col.IsComputed)
			{
#>
		[Compute]        
<#
			}
			if (IncludeReferences && tbl.FKeys != null && tbl.FKeys.Any(x => x.FromColumn ==  col.PropertyName))
			{ 
 				var toTable = MakeSingular ? tbl.FKeys.First(x => x.FromColumn == col.PropertyName).ToTableSingular : tbl.FKeys.First(x => x.FromColumn == col.PropertyName).ToTable;
#>
         [References(typeof(<#=toTable#>))]
<#
			}
			if (col.IsNullable != true && col.IsAutoIncrement != true)
			{
#>
        [Required]
<#
			}
			if (!col.IsPK)
			{
#>
        public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<#
			}
			if (col.IsPK && UseIdAsPK)
			{
#>
        public <#=col.ProperPropertyType#> Id { get; set;}
<#
			}
			if (col.IsPK && !UseIdAsPK)
			{
#>
		[PrimaryKey]
        public <#=col.ProperPropertyType#> <#=col.PropertyName#> { get; set;}
<#
			}
		}
#>
}
<#
		if (CreateAutoQueryTypes)
		{
#>
	public partial class <#=tbl.ClassName#>Query: QueryDb<<#=tbl.ClassName#>>
	{
<#
		foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
		{
			var ormName = (col.IsPK && UseIdAsPK) ? "Id" : col.PropertyName;
			var isString = col.ProperPropertyType == "string";
			var nullablePropType = col.ProperPropertyType.Replace("?","") + "?";
			var isArray = col.ProperPropertyType.Contains("[]");
			var isBool = col.ProperPropertyType.Contains("bool");
			var isGuid = col.ProperPropertyType.Contains("Guid");
			if (!col.IsPK)
			{
#>
        public <#=!isArray && !isString ? nullablePropType : col.ProperPropertyType#> <#=ormName#> { get; set;}
<#
			}
			if (col.IsPK && UseIdAsPK)
			{
#>
        public <#=isString ? "string" : nullablePropType#> Id { get; set;}
<#
			}
			if (col.IsPK && !UseIdAsPK)
			{
#> 
        public <#=isString ? "string" : nullablePropType#> <#=col.PropertyName#> { get; set;}
<#
			}
			if (isString)
			{
#>
	    public <#=col.ProperPropertyType#> <#=ormName#>StartsWith { get; set;}
		public <#=col.ProperPropertyType#> <#=ormName#>EndsWith { get; set;}
		public <#=col.ProperPropertyType#> <#=ormName#>Contains { get; set;}
		public <#=col.ProperPropertyType#> <#=ormName#>Like { get; set;} 
		public <#=col.ProperPropertyType#>[] <#=ormName#>Between { get; set;}
		public <#=col.ProperPropertyType#>[] <#=ormName#>In { get; set;}
<#
			}
			else if (!isArray && !isBool)
			{
				if (!isGuid)
				{
#>  
	    public <#=nullablePropType#> <#=ormName#>GreaterThanOrEqualTo { get; set;}
		public <#=nullablePropType#> <#=ormName#>GreaterThan { get; set;}
		public <#=nullablePropType#> <#=ormName#>LessThan { get; set;}
		public <#=nullablePropType#> <#=ormName#>LessThanOrEqualTo { get; set;}
		public <#=nullablePropType#> <#=ormName#>NotEqualTo { get; set;}
		public <#=col.ProperPropertyType#>[] <#=ormName#>Between { get; set;}
<#
				}
#>
		public <#=col.ProperPropertyType#>[] <#=ormName#>In { get; set;}
<#
			}
		}
#>
}
<#
		}

		manager.EndBlock();
	} // end foreach
	
	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer
	
	manager.Process(SplitIntoMultipleFiles);
#>
