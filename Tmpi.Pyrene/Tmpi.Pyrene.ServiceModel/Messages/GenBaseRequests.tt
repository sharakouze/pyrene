<#@ template language="C#" hostspecific="true" #>
<#@ include file="$(SolutionDir)Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)Shared\VisualStudioHelper.ttinclude" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	// ----- Settings START -----
	string Namespace = ""; // vide = DefaultNamespace
	string SourceNamespace = "Tmpi.Pyrene.ServiceModel.Types";
	bool MakeClassesPartial = true;
	bool SplitIntoMultipleFiles = true;
	Regex ClassFilterInclude = new Regex("^Gen", RegexOptions.IgnoreCase);
	Regex ClassFilterExclude = null;
	// ----- Settings END -----

	// get a reference to the project of this t4 template
	var project = VisualStudioHelper.CurrentProject;

	// namespace
	var fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
    {
		var defaultNamespace = project.Properties.Item("DefaultNamespace").Value.ToString();
		var fullPath = project.Properties.Item("FullPath").Value.ToString();
		if (fullPath.EndsWith("\\"))
        {
			fullPath = fullPath.Substring(0, fullPath.Length - 1);
        }
		var templateDir = Path.GetDirectoryName(Host.TemplateFile);
		var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
		fileNamespace = string.Concat(defaultNamespace, subNamespace);
	}

	var manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

<#
	if (!string.IsNullOrWhiteSpace(SourceNamespace) && (SourceNamespace != fileNamespace))
	{
#>
using <#= SourceNamespace #>;

<#
	} // end if
#>
namespace <#= fileNamespace #>
{
<#
	manager.EndBlock(); // end header
    
    // get all class items from the code model
    var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);
	// iterate all classes
    foreach (EnvDTE.CodeClass codeClass in allClasses)
    {
        // get all interfaces implemented by this class
        var allInterfaces = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(codeClass.ImplementedInterfaces, EnvDTE.vsCMElement.vsCMElementInterface, true);
        if (allInterfaces.OfType<EnvDTE.CodeInterface>()
                         .Any(i => i.Name == "IHasId"))
        {
			var included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
			var excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
			if (!included || excluded)
            {
				continue;
            }

			var getByIdRequestName = "Get" + codeClass.Name;
            manager.StartNewFile(getByIdRequestName + ".generated.cs");
#>
	/// <summary>
	/// Retourne une entité <see cref="<#= codeClass.Name #>" />.
	/// </summary>
	<#= MakeClassesPartial ? "public partial" : "public" #> class <#= getByIdRequestName #> : GetByIdRequestBase<<#= codeClass.Name #>>
	{
	}
<#
			manager.EndBlock(); // end newfile

			var deleteByIdRequestName = "Delete" + codeClass.Name;
            manager.StartNewFile(deleteByIdRequestName + ".generated.cs");
#>
	/// <summary>
	/// Supprime une entité <see cref="<#= codeClass.Name #>" />.
	/// </summary>
	<#= MakeClassesPartial ? "public partial" : "public" #> class <#= deleteByIdRequestName #> : DeleteByIdRequestBase
	{
	}
<#
        } // end if
    } // end foreach

	manager.EndBlock(); // end newfile
	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer

	manager.Process(SplitIntoMultipleFiles);
#>
