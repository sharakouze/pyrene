<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#+
public class Table
{
	public Table()
    {
		Columns = new List<Column>();
		Indices = new List<TableIndex>();
		ForeignKeys = new List<FKey>();
    }

	public string Name { get; set; }
	public string ClassName { get; set; }
	public string Schema { get; set; }
	public bool IsView { get; set; }

    public PKey PrimaryKey { get; set; }
	public List<Column> Columns { get; set; }
	public List<TableIndex> Indices { get; set; }
	public List<FKey> ForeignKeys { get; set; }

	public override string ToString()
    {
		return Schema + "." + Name;
    }
}

public class Tables : List<Table>
{
	public Column GetColumn(string schemaName, string tableName, string columnName)
    {
		var q = this.Where(t => t.Name == tableName);
		if (!string.IsNullOrEmpty(schemaName))
        {
			q = q.Where(t => t.Schema == schemaName);
        }

		var tbl = q.SingleOrDefault();;
		if (tbl != null)
        {
			var col = tbl.Columns.Where(c => c.Name == columnName).SingleOrDefault();
			return col;
        }
		return null;
	}
	public Column GetColumn(string column)
    {
		var parts = column.Split('.');
		string schemaName = parts[0];
		string tableName = parts[1];
		string columnName = parts[2];

		return GetColumn(schemaName, tableName, columnName);
	}

	public bool ChangePropertyType(string schemaName, string tableName, string columnName, string newPropertyType)
    {
		var col = GetColumn(schemaName, tableName, columnName);
		if (col != null)
        {
			col.PropertyType = newPropertyType;
			return true;
        }
		return false;
    }
	public bool ChangePropertyType(string column, string newPropertyType)
    {
		var parts = column.Split('.');
		string schemaName = parts[0];
		string tableName = parts[1];
		string columnName = parts[2];

		return ChangePropertyType(schemaName, tableName, columnName, newPropertyType);
    }
}

public class Column
{
    public string Name { get; set; }
    public string PropertyName { get; set; }
    public string PropertyType { get; set; }
    public bool IsNullable { get; set; }
	public bool IsAutoIncrement { get; set; }
	public bool IsComputed { get; set; }
	public int Size { get; set; }
	public int Precision { get; set; }
	public int Scale { get; set; }
    public string Description { get; set; }
	public string DefaultValue { get; set; }

	public Table ParentTable { get; set; }

	public Column Clone()
    {
		var newCol = new Column()
		{
			Name = Name,
			PropertyName = PropertyName,
			PropertyType = PropertyType,
			IsNullable = IsNullable,
			IsAutoIncrement = IsAutoIncrement,
			IsComputed = IsComputed,
			Size = Size,
			Precision = Precision,
			Scale = Scale,
			Description = Description,
			DefaultValue = DefaultValue,
			
			//PAS ParentTable !
		};
		return newCol;
    }
	public override string ToString()
    {
		return ParentTable.ToString() + "." + Name;
    }

	public bool IsPKey
    {
		get
        {
			if (ParentTable != null && ParentTable.PrimaryKey != null)
			{
				return ParentTable.PrimaryKey.PKeyColumns.Contains(this);
			}
			return false;
        }
    }
	public bool IsFKey
    {
		get
        {
			if (ParentTable != null)
			{
				return ParentTable.ForeignKeys.Any(f => f.FromColumns.Contains(this));
			}
			return false;
        }
    }

	public string ProperPropertyType
	{
		get
		{
			if (IsNullable &&
				(PropertyType != "byte[]") &&
				(PropertyType != "string") &&
				(PropertyType != "Microsoft.SqlServer.Types.SqlGeography") &&
				(PropertyType != "Microsoft.SqlServer.Types.SqlGeometry"))
            {
				return PropertyType + "?";
            }
			return PropertyType;
		}
	}
}

public class PKey
{
	public PKey()
    {
		PKeyColumns = new List<Column>();
    }

    public string Name { get; set; }

	public List<Column> PKeyColumns { get; set; }
}

public class TableIndex
{
	public TableIndex()
    {
		IndexColumns = new List<Column>();
    }

    public string Name { get; set; }
	public bool IsUnique { get; set; }
	public bool IsClustered { get; set; }

	public Table ParentTable { get; set; }

	public List<Column> IndexColumns { get; set; }
}

public class FKey
{
	public FKey()
    {
		FromColumns = new List<Column>();
		ReferencedColumns = new List<Column>();
    }

    public string Name { get; set; }
	public string DeleteRule { get; set; }
	public string UpdateRule { get; set; }

	public List<Column> FromColumns { get; set; }
	public List<Column> ReferencedColumns { get; set; }

	public Table FromTable
	{
		get
        {
			var col = FromColumns.FirstOrDefault();
			if (col != null)
            {
				return col.ParentTable;
            }
			return null;
        }
    }
	public Table ReferencedTable
	{
		get
        {
			var col = ReferencedColumns.FirstOrDefault();
			if (col != null)
            {
				return col.ParentTable;
            }
			return null;
        }
    }
}


static Regex rxCleanUp = new Regex(@"[^\w\d_]", RegexOptions.Compiled);

static string[] cs_keywords = { "abstract", "event", "new", "struct", "as", "explicit", "null",
	 "switch", "base", "extern", "object", "this", "bool", "false", "operator", "throw",
	 "break", "finally", "out", "true", "byte", "fixed", "override", "try", "case", "float",
	 "params", "typeof", "catch", "for", "private", "uint", "char", "foreach", "protected",
	 "ulong", "checked", "goto", "public", "unchecked", "class", "if", "readonly", "unsafe",
	 "const", "implicit", "ref", "ushort", "continue", "in", "return", "using", "decimal",
	 "int", "sbyte", "virtual", "default", "interface", "sealed", "volatile", "delegate",
	 "internal", "short", "void", "do", "is", "sizeof", "while", "double", "lock",
	 "stackalloc", "else", "long", "static", "enum", "namespace", "string" };

static Func<string, string> CleanUp = (str) =>
{
	str = rxCleanUp.Replace(str, "_");

	if (char.IsDigit(str[0]))
	{
		str = "_" + str;
	}
	else if (cs_keywords.Contains(str))
	{
		str = "@" + str;
	}

    return str;
};



public string GetColumnDefaultValue(Column col)
{
        string sysType=string.Format("\"{0}\"",col.DefaultValue);
        switch (col.PropertyType.ToLower())
        {
			case "long":
			case "int":
			case "double":
			case "decimal":
			case "bool":
                sysType= col.DefaultValue.ToString().Replace("'","").Replace("\"","");
                break;
            case "guid":
                sysType=  string.Format("\"{0}\"",col.DefaultValue);
                 break;
            case "datetime":
			{
				if (col.DefaultValue.ToLower() == "current_time" || col.DefaultValue.ToLower() == "current_date"|| col.DefaultValue.ToLower() == "current_timestamp")
					sysType=  "SystemMethods.CurrentDateTime";
				else
                	sysType=  "\"" +col.DefaultValue+"\"";
                break;
			}
        }
        return sysType;
}

Tables LoadTables(string connectionString, string schemaName = null, bool includeViews = false)
{
	var reader = new SqlServerSchemaReader();
	var tables = reader.ReadSchema(connectionString, schemaName, includeViews);

    var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
    foreach (var tbl in tables)
    {
        foreach (var c in tbl.Columns)
        {
            c.PropertyName = rxClean.Replace(c.PropertyName, "_$1");

            // Make sure property name doesn't clash with class name
            if (c.PropertyName == tbl.ClassName)
            {
                c.PropertyName = "_" + c.PropertyName;
            }
        }
    }

    return tables;
}


static int GetDatatypePrecision(string type)
{
	int startPos = type.IndexOf(",");
	if (startPos < 0)
		return -1;
	int endPos = type.IndexOf(")");
	if (endPos < 0)
		return -1;
	string typePrecisionStr = type.Substring(startPos+1,endPos-startPos-1);
	int result = -1;
	if (int.TryParse(typePrecisionStr,out result))
		return result;
	else
		return -1;
}

static int GetDatatypeSize(string type)
{
	int startPos = type.IndexOf("(");
	if (startPos < 0)
		return -1;
	int endPos = type.IndexOf(",");
	if (endPos < 0)
	{
		endPos = type.IndexOf(")");
	}
	string typeSizeStr = type.Substring(startPos+1,endPos-startPos-1);
	int result = -1;
	if (int.TryParse(typeSizeStr,out result))
		return result;
	else
		return -1;
}

abstract class SchemaReader
{
	protected readonly DbProviderFactory _factory;
	
	public SchemaReader(string providerName)
    {
		_factory = DbProviderFactories.GetFactory(providerName);
    }

	public abstract Tables ReadSchema(string connectionString, string schemaName, bool includeViews);
}

class SqlServerSchemaReader : SchemaReader
{
	public SqlServerSchemaReader()
		: base("System.Data.SqlClient")
	{
	}

	public override Tables ReadSchema(string connectionString, string schemaName, bool includeViews)
	{
		using (var connection = _factory.CreateConnection())
        {
			connection.ConnectionString = connectionString;
			connection.Open();

			var tables = LoadTables(connection, schemaName, includeViews);

			foreach (var tbl in tables)
			{
				tbl.Columns = LoadColumns(connection, tbl);

				tbl.PrimaryKey = LoadPrimaryKey(connection, tbl);

				tbl.Indices = LoadIndices(connection, tbl);
			}
				
			LoadForeignKeys(connection, schemaName, tables);

			return tables;
        }
	}

	private Tables LoadTables(DbConnection connection, string schemaName, bool includeViews)
    {
		var tables = new Tables();

		using (var cmd = _factory.CreateCommand())
		{
			cmd.Connection = connection;
			cmd.CommandText = TABLE_SQL;

			var p1 = cmd.CreateParameter();
			p1.ParameterName = "@schemaName";
			if (string.IsNullOrEmpty(schemaName))
			{
				p1.Value = DBNull.Value;
			}
			else
			{
				p1.Value = schemaName;
			} 

			var p2 = cmd.CreateParameter();
			p2.ParameterName = "@includeViews";
			p2.Value = includeViews;

			cmd.Parameters.Add(p1);
			cmd.Parameters.Add(p2);

			using (var rdr = cmd.ExecuteReader())
			{
				while (rdr.Read())
				{
					var tbl = new Table();

					tbl.Name = rdr["TABLE_NAME"].ToString();
					tbl.Schema = rdr["TABLE_SCHEMA"].ToString();
					tbl.IsView = string.Equals(rdr["TABLE_TYPE"].ToString(), "VIEW", StringComparison.OrdinalIgnoreCase);

					tbl.ClassName = CleanUp(tbl.Name);

					tables.Add(tbl);
				}
			}
		}
		
		return tables;
    }

	private List<Column> LoadColumns(DbConnection connection, Table tbl)
	{
		var columns = new List<Column>();

		using (var cmd = _factory.CreateCommand())
		{
			cmd.Connection = connection;
			cmd.CommandText = COLUMN_SQL;

			var p1 = cmd.CreateParameter();
			p1.ParameterName = "@tableName";
			p1.Value = tbl.Name;

			var p2 = cmd.CreateParameter();
			p2.ParameterName = "@schemaName";
			p2.Value = tbl.Schema;

			cmd.Parameters.Add(p1);
			cmd.Parameters.Add(p2);

			using (var rdr = cmd.ExecuteReader())
			{
				while (rdr.Read())
				{
					var col = new Column();

					col.Name = rdr["COLUMN_NAME"].ToString();
					col.Size = rdr["CHARACTER_MAXIMUM_LENGTH"] == DBNull.Value ? -1 : (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
					col.Precision = rdr["NUMERIC_PRECISION"] == DBNull.Value ? -1 : (byte)rdr["NUMERIC_PRECISION"];
					col.Scale = rdr["NUMERIC_SCALE"] == DBNull.Value ? -1 : (int)rdr["NUMERIC_SCALE"];
					col.IsNullable = string.Equals(rdr["IS_NULLABLE"].ToString(), "YES", StringComparison.OrdinalIgnoreCase);
					col.IsAutoIncrement = ((int)rdr["IsIdentity"]) == 1;
					col.IsComputed = ((int)rdr["IsComputed"]) == 1;
					col.Description = rdr["MS_Description"].ToString();

					col.PropertyName = CleanUp(col.Name);
					col.PropertyType = GetPropertyType(rdr["DATA_TYPE"].ToString());
					col.ParentTable = tbl;

					columns.Add(col);
				}
			}
		}
	
		return columns;
	}

    private PKey LoadPrimaryKey(DbConnection connection, Table tbl)
	{
		PKey pk = null;

		using (var cmd = _factory.CreateCommand())
		{
			cmd.Connection = connection;
			cmd.CommandText = PRIMARY_KEYS_SQL;

			var p1 = cmd.CreateParameter();
			p1.ParameterName = "@tableName";
			p1.Value = tbl.Name;

			var p2 = cmd.CreateParameter();
			p2.ParameterName = "@schemaName";
			p2.Value = tbl.Schema;

			cmd.Parameters.Add(p1);
			cmd.Parameters.Add(p2);

			using (var rdr = cmd.ExecuteReader())
			{
				while (rdr.Read())
				{
					if (pk == null)
					{
						pk = new PKey();
						
						pk.Name = rdr["CONSTRAINT_NAME"].ToString();
					}

					string columnName = rdr["COLUMN_NAME"].ToString();

					var col = tbl.Columns.Where(c => c.Name == columnName).SingleOrDefault();
					if (col != null)
                    {
						pk.PKeyColumns.Add(col);
                    }
				}
			}
		}

		return pk;
	}

    private List<TableIndex> LoadIndices(DbConnection connection, Table tbl)
    {
        var indices = new List<TableIndex>();

        using (var cmd1 = _factory.CreateCommand())
        {
            cmd1.Connection = connection;
            cmd1.CommandText = INDEX_COL_SQL;

			var p1 = cmd1.CreateParameter();
			p1.ParameterName = "@tableName";
			p1.Value = tbl.Name;

			var p2 = cmd1.CreateParameter();
			p2.ParameterName = "@schemaName";
			p2.Value = tbl.Schema;

			cmd1.Parameters.Add(p1);
			cmd1.Parameters.Add(p2);

            using (var rdr = cmd1.ExecuteReader())
            {
            	while (rdr.Read())
            	{
					string indexName = rdr["IndexName"].ToString();
					
					var idx = indices.Where(i => i.Name == indexName).SingleOrDefault();
					if (idx == null)
                    {
						idx = new TableIndex();

            			idx.Name = indexName;
            			idx.IsUnique = (bool)rdr["IsUnique"];
						idx.IsClustered = string.Equals(rdr["TypeDesc"].ToString(), "CLUSTERED", StringComparison.OrdinalIgnoreCase);
					
						idx.ParentTable = tbl;

            			indices.Add(idx);
                    }

					string colName = rdr["ColumnName"].ToString();
					var col = tbl.Columns.Where(c => c.Name == colName).SingleOrDefault();
					if (col != null)
                    {
						idx.IndexColumns.Add(col);
                    }
            	}
            }
        }

        return indices;
	}

	private void LoadForeignKeys(DbConnection connection, string schemaName, Tables tbls)
    {
		using (var cmd = _factory.CreateCommand())
		{
			cmd.Connection = connection;
			cmd.CommandText = FOREIGN_KEYS_SQL;

			var p1 = cmd.CreateParameter();
			p1.ParameterName = "@schemaName";
			if (string.IsNullOrEmpty(schemaName))
			{
				p1.Value = DBNull.Value;
			}
			else
			{
				p1.Value = schemaName;
			}

			cmd.Parameters.Add(p1);

			using (var rdr = cmd.ExecuteReader())
			{
				while (rdr.Read())
				{
					string fkName = rdr["CONSTRAINT_NAME"].ToString(); 
					string fkTableSchema = rdr["FK_TABLE_SCHEMA"].ToString();
					string fkTableName = rdr["FK_TABLE_NAME"].ToString();

					var tbl = tbls.Where(t => t.Schema == fkTableSchema && t.Name == fkTableName).SingleOrDefault();
					if (tbl != null)
                    {
						var fk = tbl.ForeignKeys.Where(f => f.Name == fkName).SingleOrDefault();
						if (fk == null)
                        {
							fk = new FKey();
							
							fk.Name = fkName;
							fk.DeleteRule = string.Equals(rdr["DELETE_RULE"].ToString(), "NO ACTION", StringComparison.OrdinalIgnoreCase) ? null : rdr["DELETE_RULE"].ToString();
							fk.UpdateRule = string.Equals(rdr["UPDATE_RULE"].ToString(), "NO ACTION", StringComparison.OrdinalIgnoreCase) ? null : rdr["UPDATE_RULE"].ToString();

							tbl.ForeignKeys.Add(fk);
                        }

						string fkColumnName = rdr["FK_COLUMN_NAME"].ToString();

						var col = tbl.Columns.Where(c => c.Name == fkColumnName).SingleOrDefault();
						if (col != null)
                        {
							fk.FromColumns.Add(col);

							string refTableSchema = rdr["REF_TABLE_SCHEMA"].ToString();
							string refTableName = rdr["REF_TABLE_NAME"].ToString();
							string refColumnName = rdr["REF_COLUMN_NAME"].ToString();

							var reftbl = tbls.Where(t => t.Schema == refTableSchema && t.Name == refTableName).SingleOrDefault();
							if (reftbl != null)
							{
								Column refcol = reftbl.Columns.Where(c => c.Name == refColumnName).SingleOrDefault();
								if (refcol != null)
								{
									fk.ReferencedColumns.Add(refcol);
								}
							}
                        }
                    }
				}
			}
		}
    }

	private string GetPropertyType(string sqlType)
	{
		string propertyType;
		string dbType;
		GetPropertyAndDbType(sqlType, out propertyType, out dbType);
		
		return propertyType;
	}

	private string GetDbType(string sqlType)
	{
		string propertyType;
		string dbType;
		GetPropertyAndDbType(sqlType, out propertyType, out dbType);
		
		return dbType;
	}

	private void GetPropertyAndDbType(string sqlType, out string propertyType, out string dbType)
	{
		string sysType = "string";
		string sysDbType = "DbType.String";
		
		switch (sqlType.ToLower())
		{
			case "varchar":
				sysType = "string";
				sysDbType = "DbType.AnsiString";
				break;
			case "bigint":
				sysType = "long";
				sysDbType = "DbType.Int64";
				break;
			case "smallint":
				sysType = "short";
				sysDbType = "DbType.Int16";
				break;
			case "int":
				sysType = "int";
				sysDbType = "DbType.Int32";
				break;
			case "uniqueidentifier":
				sysType = "Guid";
				sysDbType = "DbType.Guid";
				break;
			case "smalldatetime":
			case "datetime":
			case "datetime2":
			case "date":
				sysType = "DateTime";
				sysDbType = "DbType.DateTime";
				break;
			case "time":
				sysType = "TimeSpan";
				sysDbType = "DbType.Time";
				break;
			case "datetimeoffset":
				sysType = "DateTimeOffset";
				sysDbType = "DbType.DateTimeOffset";
				break;
  			case "float":
				sysType = "double";
				sysDbType = "DbType.Double";
				break;
			case "real":
				sysType = "float";
				sysDbType = "DbType.Double";
				break;
			case "numeric":
			case "smallmoney":
			case "decimal":
			case "money":
				sysType = "decimal";
				sysDbType = "DbType.Decimal";
				break;
			case "tinyint":
				sysType = "byte";
				sysDbType = "DbType.Byte";
				break;
			case "bit":
				sysType = "bool";
				sysDbType = "DbType.Boolean";
				break;
			case "image":
			case "binary":
			case "varbinary":
			case "timestamp":
				sysType = "byte[]";
				sysDbType = "DbType.Binary";
				break;
			case "geography":
				sysType = "Microsoft.SqlServer.Types.SqlGeography";
				sysDbType = "DbType.";
				break;
			case "geometry":
				sysType = "Microsoft.SqlServer.Types.SqlGeometry";
				sysDbType = "DbType.";
				break;
		}

		propertyType = sysType;
		dbType = sysDbType;
	}

	const string TABLE_SQL = @"SELECT TBL.TABLE_SCHEMA,
			TBL.TABLE_NAME,
			TBL.TABLE_TYPE
		FROM INFORMATION_SCHEMA.TABLES TBL
		WHERE (@schemaName IS NULL OR TBL.TABLE_SCHEMA=@schemaName)
			AND (TBL.TABLE_TYPE='BASE TABLE' OR (@includeViews=1 AND TBL.TABLE_TYPE='VIEW'))";

	const string COLUMN_SQL = @"SELECT COL.TABLE_SCHEMA,
		COL.TABLE_NAME,
		COL.COLUMN_NAME,
		COL.IS_NULLABLE,
		COL.DATA_TYPE,
		COL.CHARACTER_MAXIMUM_LENGTH,
		COL.NUMERIC_PRECISION,
		COL.NUMERIC_SCALE,
		COLUMNPROPERTY(OBJECT_ID('[' + COL.TABLE_SCHEMA + '].[' + COL.TABLE_NAME + ']'), COL.COLUMN_NAME, 'IsIdentity') as IsIdentity,
		COLUMNPROPERTY(OBJECT_ID('[' + COL.TABLE_SCHEMA + '].[' + COL.TABLE_NAME + ']'), COL.COLUMN_NAME, 'IsComputed') as IsComputed,
		PROP.value as MS_Description
	FROM INFORMATION_SCHEMA.COLUMNS COL
	LEFT JOIN SYS.EXTENDED_PROPERTIES PROP ON PROP.name='MS_Description' AND PROP.class=1
		AND PROP.major_id=OBJECT_ID('[' + COL.TABLE_SCHEMA + '].[' + COL.TABLE_NAME + ']') AND PROP.minor_id=COL.ORDINAL_POSITION
	WHERE COL.TABLE_NAME=@tableName AND COL.TABLE_SCHEMA=@schemaName
	ORDER BY COL.TABLE_SCHEMA, COL.TABLE_NAME, COL.ORDINAL_POSITION";

	const string PRIMARY_KEYS_SQL = @"SELECT TC.CONSTRAINT_NAME,
		TC.TABLE_SCHEMA,
		TC.TABLE_NAME,
		KCU.COLUMN_NAME
	FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TC
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU ON TC.TABLE_SCHEMA=KCU.TABLE_SCHEMA AND TC.TABLE_NAME=KCU.TABLE_NAME AND TC.CONSTRAINT_NAME=KCU.CONSTRAINT_NAME
	WHERE TC.CONSTRAINT_TYPE='PRIMARY KEY'
		AND (TC.TABLE_NAME=@tableName AND TC.TABLE_SCHEMA=@schemaName)
	ORDER BY KCU.ORDINAL_POSITION";

    const string INDEX_COL_SQL = @"SELECT SCH.name as SchemaName,
		TBL.name as TableName,
		IDX.name as IndexName,
		IDX.is_unique as IsUnique,
		IDX.type_desc as TypeDesc,
		COL.name as ColumnName
	FROM sys.schemas SCH 
	INNER JOIN sys.tables TBL ON SCH.schema_id=TBL.schema_id
	INNER JOIN sys.indexes IDX ON TBL.object_id=IDX.object_id
	INNER JOIN sys.index_columns IC ON IDX.object_id=IC.object_id AND IDX.index_id=IC.index_id
	INNER JOIN sys.columns COL ON IC.object_id=COL.object_id AND IC.column_id=COL.column_id
	WHERE IDX.is_primary_key=0
		AND TBL.name=@tableName AND SCH.name=@schemaName
	ORDER BY SCH.name, TBL.name, IDX.name, IC.key_ordinal";

	const string FOREIGN_KEYS_SQL = @"SELECT RC.CONSTRAINT_NAME,
		RC.DELETE_RULE,
		RC.UPDATE_RULE,
		KCU1.TABLE_SCHEMA as FK_TABLE_SCHEMA,
		KCU1.TABLE_NAME as FK_TABLE_NAME,
		KCU1.COLUMN_NAME as FK_COLUMN_NAME,
		KCU2.CONSTRAINT_NAME as REF_CONSTRAINT_NAME,
		KCU2.TABLE_SCHEMA as REF_TABLE_SCHEMA,
		KCU2.TABLE_NAME as REF_TABLE_NAME,
		KCU2.COLUMN_NAME as REF_COLUMN_NAME
	FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS RC
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU1 ON KCU1.CONSTRAINT_SCHEMA=RC.CONSTRAINT_SCHEMA AND KCU1.CONSTRAINT_NAME=RC.CONSTRAINT_NAME 
	INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE KCU2 ON KCU2.CONSTRAINT_SCHEMA=RC.UNIQUE_CONSTRAINT_SCHEMA AND KCU2.CONSTRAINT_NAME=RC.UNIQUE_CONSTRAINT_NAME 
		AND KCU2.ORDINAL_POSITION=KCU1.ORDINAL_POSITION
	WHERE (@schemaName IS NULL OR KCU1.TABLE_SCHEMA=@schemaName)
	ORDER BY KCU1.TABLE_SCHEMA, KCU1.TABLE_NAME, KCU1.CONSTRAINT_NAME, KCU1.ORDINAL_POSITION";

}
#>
