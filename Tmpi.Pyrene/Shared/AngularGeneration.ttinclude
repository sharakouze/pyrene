<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
public class AngularGeneration
{
	private readonly TextTransformation _tt;

	private void Write(string textToAppend)
    {
		_tt.Write(textToAppend);
	}

	public AngularGeneration(TextTransformation tt, string entityName)
    {
        if (tt == null)
        {
            throw new ArgumentNullException("tt");
        }
        if (string.IsNullOrEmpty(entityName))
        {
            throw new ArgumentNullException("entityName");
        }
		_tt = tt;

		SetEntityName(entityName);
    }

	public string EntityName { get; private set; }
	public string DashCaseEntityName { get; private set; }
	public string CamelCaseEntityName { get; private set; }

	private void SetEntityName(string entityName)
    {
		EntityName = entityName;

		if (entityName == entityName.ToUpper())
        {
			DashCaseEntityName = entityName.ToLower();
        }
		else
		{
			var dashcase = new StringBuilder();
			foreach (char c in entityName)
			{
				if (char.IsUpper(c) && dashcase.Length > 0)
				{
					dashcase.Append("-");
				}
				dashcase.Append(c);
			}
			DashCaseEntityName = dashcase.ToString().ToLower();
        }

		CamelCaseEntityName = entityName[0].ToString().ToLower() + entityName.Substring(1);
	}

	public void WriteService(bool canSelect = true, bool canDelete = true)
    {
		var lstDtos = new List<string>();
		if (canSelect)
        {
			lstDtos.Add(string.Format("Select{0}", EntityName));
			lstDtos.Add(string.Format("Select{0}Response", EntityName));
        }
		if (canDelete)
        {
			lstDtos.Add(string.Format("Delete{0}", EntityName));
        }

#>
//------------------------------------------------------------------------------
// <auto-generated>
// Ce code a été généré par un outil.
//
// Les modifications apportées à ce fichier peuvent provoquer un comportement
// incorrect et seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

import { Injectable } from '@angular/core';

import { ServiceClient } from '../../service-client';
import { <#= string.Join(", ", lstDtos) #> } from '../../dtos';

@Injectable()
export class <#= EntityName #>Service extends ServiceClient {
<#+
		if (canSelect)
		{
#>
	select<#= EntityName #>(fields: string, sort: string[], skip?: number, take?: number): Promise<Select<#= EntityName #>Response> {
		const req = new Select<#= EntityName #>();
		req.Fields = fields;
		req.Sort = sort;
		if (skip) {
			req.Skip = skip;
		}
		if (take) {
			req.Take = take;
		}

		return this.client.get(req);
	}

<#+
		}
		if (canDelete)
		{
#>
	delete<#= EntityName #>(id: number): Promise<void> {
		const req = new Delete<#= EntityName #>();
		req.Cle<#= EntityName #> = id;

		return this.client.delete(req);
	}

<#+
		}
#>
}
<#+
    }

	public void WriteSimpleListComponentHtml(Dictionary<string, string> columns)
    {
#>
<!-- auto-generated -->
<table>
	<tr>
<#+
		foreach (var kvp in columns)
        {
#>
		<th><#= kvp.Value #></th>
<#+
        }
#>
	</tr>
	<tr *ngFor="let obj of <#= CamelCaseEntityName #>.data">
<#+
		foreach (var kvp in columns)
        {
#>
		<td>{{obj.<#= kvp.Key #>}}</td>
<#+
        }
#>
	</tr>
</table>
<#+
    }

	public void WriteSimpleListComponentTs(IEnumerable<string> fields, string defaultSort = null)
	{
		var dic = new Dictionary<string, List<string>>();
		foreach (string f in fields)
        {
			var parts = f.Split(new [] { '.' }, 2);
			if (parts.Length == 1)
            {
				List<string> lst = null;
				dic.TryGetValue(string.Empty, out lst);
				if (lst == null)
                {
					lst = new List<string>();
					dic.Add(string.Empty, lst);
                }
				lst.Add(parts[0]);
            }
			else if (parts.Length > 1)
            {
				List<string> lst = null;
				dic.TryGetValue(parts[0], out lst);
				if (lst == null)
                {
					lst = new List<string>();
					dic.Add(parts[0], lst);
                }
				lst.Add(parts[1]);
            }
        }

		var fieldParts = new List<string>();
		foreach (var kvp in dic)
        {
			if (kvp.Key == string.Empty)
            {
				fieldParts.Add(string.Join(",", kvp.Value));
            }
			else
            {
				fieldParts.Add(kvp.Key + "(" + string.Join(",", kvp.Value) + ")");
            }
        }

		string fieldsStr = string.Join(",", fieldParts);

		if (string.IsNullOrEmpty(defaultSort))
        {
			var cols = new [] { "Lib" + EntityName, "Cod" + EntityName, "Num" + EntityName };
			defaultSort = cols.FirstOrDefault(c => fields.Contains(c));
			if (string.IsNullOrEmpty(defaultSort))
            {
				defaultSort = fields.FirstOrDefault(f => f.StartsWith("Cod"));
            }
        }
#>
//------------------------------------------------------------------------------
// <auto-generated>
// Ce code a été généré par un outil.
//
// Les modifications apportées à ce fichier peuvent provoquer un comportement
// incorrect et seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

import { Component, OnInit } from '@angular/core';

import { PagedData } from '../../paged-data';
import { <#= EntityName #>Service } from './<#= DashCaseEntityName #>.service';
import { <#= EntityName #> } from '../../dtos';

@Component({
	selector: '<#= DashCaseEntityName #>-list',
	templateUrl: '<#= DashCaseEntityName #>-list.component.html',
	providers: [<#= EntityName #>Service]
})
export class <#= EntityName #>ListComponent implements OnInit {
	<#= CamelCaseEntityName #>: PagedData<<#= EntityName #>> = {
		sort: '<#= defaultSort #>',
		pageIndex: 0,
		pageSize: 20
	}

	constructor(private <#= CamelCaseEntityName #>Service: <#= EntityName #>Service) {
	}

	ngOnInit() {
		this.load<#= EntityName #>();
	}

	load<#= EntityName #>(): void {
		const fields = '<#= fieldsStr #>';
		const skip = this.<#= CamelCaseEntityName #>.pageIndex * this.<#= CamelCaseEntityName #>.pageSize;
		this.<#= CamelCaseEntityName #>Service.select<#= EntityName #>(fields, [this.<#= CamelCaseEntityName #>.sort], skip, this.<#= CamelCaseEntityName #>.pageSize)
			.then(r => this.<#= CamelCaseEntityName #>.data = r.Results);
	}

	delete<#= EntityName #>(id: number): void {
		this.<#= CamelCaseEntityName #>Service.delete<#= EntityName #>(id);
	}
}
<#+
    }
}
#>
