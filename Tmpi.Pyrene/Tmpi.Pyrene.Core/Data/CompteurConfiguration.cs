// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.61
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace Tmpi.Pyrene.Core.Data
{
    using Tmpi.Pyrene.Core.Models.Entities;

    // Compteur
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.21.1.0")]
    public class CompteurConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Compteur>
    {
        public CompteurConfiguration()
            : this("CORE")
        {
        }

        public CompteurConfiguration(string schema)
        {
            ToTable(schema + ".Compteur");
            HasKey(x => x.CleCompteur);

            Property(x => x.CleCompteur).HasColumnName(@"CleCompteur").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CodCompteur).HasColumnName(@"CodCompteur").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.LibCompteur).HasColumnName(@"LibCompteur").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(200);
            Property(x => x.TxtCompteur).HasColumnName(@"TxtCompteur").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);
            Property(x => x.EstActif).HasColumnName(@"EstActif").IsRequired().HasColumnType("bit");
            Property(x => x.DatCreation).HasColumnName(@"DatCreation").IsRequired().HasColumnType("datetime");
            Property(x => x.DatModif).HasColumnName(@"DatModif").IsRequired().HasColumnType("datetime");
            Property(x => x.CodExterne).HasColumnName(@"CodExterne").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.TypCompteur).HasColumnName(@"TypCompteur").IsRequired().HasColumnType("smallint");
            Property(x => x.CleSociete).HasColumnName(@"CleSociete").IsOptional().HasColumnType("int");
            Property(x => x.CleSecteur).HasColumnName(@"CleSecteur").IsOptional().HasColumnType("int");
            Property(x => x.CleService).HasColumnName(@"CleService").IsOptional().HasColumnType("int");
            Property(x => x.TypPeriodicite).HasColumnName(@"TypPeriodicite").IsRequired().HasColumnType("tinyint");
            Property(x => x.ValPrefixe1).HasColumnName(@"ValPrefixe1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.ValFormatDate1).HasColumnName(@"ValFormatDate1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.ValPrefixe2).HasColumnName(@"ValPrefixe2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.NbrDigit).HasColumnName(@"NbrDigit").IsRequired().HasColumnType("tinyint");
            Property(x => x.ValSuffixe1).HasColumnName(@"ValSuffixe1").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.ValFormatDate2).HasColumnName(@"ValFormatDate2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.ValSuffixe2).HasColumnName(@"ValSuffixe2").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(25);
            Property(x => x.LstFormatMois).HasColumnName(@"LstFormatMois").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(500);

            // Foreign keys
            HasOptional(a => a.Societe).WithMany(b => b.Compteur).HasForeignKey(c => c.CleSociete).WillCascadeOnDelete(false); // FK_Compteur_CleSociete
            HasOptional(a => a.SocieteSecteur).WithMany(b => b.Compteur).HasForeignKey(c => c.CleSecteur).WillCascadeOnDelete(false); // FK_Compteur_CleSecteur
            HasOptional(a => a.SocieteService).WithMany(b => b.Compteur).HasForeignKey(c => c.CleService).WillCascadeOnDelete(false); // FK_Compteur_CleService
        }
    }

}
// </auto-generated>
