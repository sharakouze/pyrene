<#@ template language="C#" hostspecific="true" debug="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\MultipleOutputHelper.ttinclude" #>
<#@ include file="$(MSBuildProjectDirectory)\..\Shared\VisualStudioHelper.ttinclude" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	/***** TODO *****
    - Alternative a TransformRoutePath avec des const
    - abstract class xxxById pour les requests
	****************/

	/*********************/
	/** CUSTOM SETTINGS **/
	/*********************/

	// Namespace des fichiers générés. Si vide DefaultNamespace du projet/répertoire courant.
	string Namespace = "";

	// Limite le traitement aux classes dans ce namespace. Si vide pas de limitation.
	string SourceNamespace = "Tmpi.Pyrene.Services.ServiceModel.Types";
	
	// true pour générer des classes partial.
	bool MakeClassesPartial = true;

	// true pour générer chaque classe dans un fichier séparé.
	bool SplitIntoMultipleFiles = true;
	
	// true pour ajouter l'attribut [Route(...)] sur les classes générées.
	bool AddRouteAttributes = true;

	// Ajoute [ApiResponse]...
	bool AddApiAttributes = true;

	// true pour transformer la route de la ressource, ex: GenFournContact de '/GenFournContact/' en '/GenFourn/Contact/'.
	bool TransformRoutePath = true;

	// RegExp pour filtrer globalement les classes traitées, null pour tout inclure et/ou ne rien exclure.
	Regex ClassFilterInclude = new Regex("^Gen", RegexOptions.IgnoreCase);
	Regex ClassFilterExclude = null;

	// Filtre par message généré.
	Regex GetByIdClassFilterExclude = null;
	Regex DeleteByIdClassFilterExclude = null;
	Regex PatchByIdClassFilterExclude = null;
	Regex AutocompleteClassFilterExclude = null;
	Regex FindClassFilterExclude = null;

#>
<#
	// namespace
	string fileNamespace = Namespace;
	if (string.IsNullOrWhiteSpace(fileNamespace))
	{
		fileNamespace = VisualStudioHelper.CurrentFileNamespace;
	}

	Manager manager = Manager.Create(Host, GenerationEnvironment);
	manager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Net;
using ServiceStack;
<#
	if (!string.IsNullOrWhiteSpace(SourceNamespace) && (SourceNamespace != fileNamespace))
	{
#>
using <#= SourceNamespace #>;

namespace <#= fileNamespace #>
{
<#
	} // end if

	manager.EndBlock(); // end header
 
	// get a reference to the project of this t4 template
	Project project = VisualStudioHelper.CurrentProject;

	// get all class items from the code model
	var allClasses = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(project.CodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
		.OfType<CodeClass>();
	if (!string.IsNullOrWhiteSpace(SourceNamespace))
	{
		allClasses = allClasses.Where(c => c.FullName.StartsWith(SourceNamespace)).ToList();
	}

	// iterate all classes
	foreach (CodeClass codeClass in allClasses)
	{
		bool included = ClassFilterInclude == null || ClassFilterInclude.IsMatch(codeClass.Name);
		bool excluded = ClassFilterExclude != null && ClassFilterExclude.IsMatch(codeClass.Name);
		if (!included || excluded)
		{
			continue;
		}

		var c = GetPrimaryKeyColumn(codeClass);
#>
<#= codeClass.Name #>
	<#= c.Name #>
<#

		string strRoute = codeClass.Name;
		if (AddRouteAttributes && TransformRoutePath)
		{
			strRoute = string.Join("/", GetRoutePathFromClass(codeClass, allClasses));
		}

		// get all interfaces implemented by this class
		var allInterfaces = VisualStudioHelper.CodeModel.GetAllImplementedInterfaces(codeClass);
		var iHasIdInterface = allInterfaces.FirstOrDefault(i => i.FullName.StartsWith("ServiceStack.Model.IHasId<") ||
			i.FullName == "ServiceStack.Model.IHasIntId");
		if (iHasIdInterface != null)
		{
			string tkey = null;
			if (iHasIdInterface.FullName == "ServiceStack.Model.IHasIntId")
            {
				tkey = "int";
            }
			else
			{
				string str = iHasIdInterface.FullName.Replace("ServiceStack.Model.IHasId<", "");
				str = str.Remove(str.Length - 1, 1);

				switch (str)
                {
					case "System.Int32":
						tkey = "int";
						break;
					case "System.Int16":
						tkey = "short";
						break;
					default:
						tkey = str;
						break;
                }
			}

            string swagDataType = "SwaggerDataTypes." + tkey.Substring(0,1).ToUpper() + tkey.Substring(1);

			bool getByIdExcluded = GetByIdClassFilterExclude != null && GetByIdClassFilterExclude.IsMatch(codeClass.Name);
			if (!getByIdExcluded)
			{
				var getByIdClassName = "Get" + codeClass.Name;
				var getByIdClassDescription = "Retourne une ressource {0} à partir de son Id.";
                var idPropDescription = "Id de la ressource {0} à retourner.";
				var fieldsPropDescription = "Champs à retourner, ou null pour retourner tous les champs.";

				manager.StartNewFile(getByIdClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(getByIdClassDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
            if (AddRouteAttributes)
            {
#>
	[Route("/<#= strRoute #>/{Id}", HttpVerbs.Get, Summary = "<#= string.Format(getByIdClassDescription, codeClass.Name) #>")]
<#
			    if (AddApiAttributes)
                {
#>
    [ApiResponse(HttpStatusCode.BadRequest, "La ressource <#= codeClass.Name #> ne contient pas tous les champs demandés.")]
    [ApiResponse(HttpStatusCode.NotFound, "La ressource <#= codeClass.Name #> spécifiée est introuvable.")]
<#
                }
			} // end if
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= getByIdClassName #> : IReturn<<#= codeClass.Name #>>
	{
        /// <summary>
        /// <#= string.Format(idPropDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(idPropDescription, codeClass.Name) #>", DataType = <#= swagDataType #>, IsRequired = true, ParameterType = SwaggerParamTypes.Path)]
<#
                }
#>
        public <#= tkey #> Id { get; set; }

        /// <summary>
        /// <#= fieldsPropDescription #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= fieldsPropDescription #>", DataType = SwaggerDataTypes.ArrayOfString)]
<#
                }
#>
        public string[] Fields { get; set; }
	}
<#
				manager.EndBlock(); // end newfile
			} // end if

			bool deleteByIdExcluded = DeleteByIdClassFilterExclude != null && DeleteByIdClassFilterExclude.IsMatch(codeClass.Name);
			if (!deleteByIdExcluded)
			{
				var deleteByIdClassName = "Delete" + codeClass.Name;
				var deleteByIdClassDescription = "Supprime une ressource {0} à partir de son Id.";
                var idPropDescription = "Id de la ressource {0} à supprimer.";

				manager.StartNewFile(deleteByIdClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(deleteByIdClassDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
            if (AddRouteAttributes)
            {
#>
	[Route("/<#= strRoute #>/{Id}", HttpVerbs.Delete, Summary = "<#= string.Format(deleteByIdClassDescription, codeClass.Name) #>")]
<#
			    if (AddApiAttributes)
                {
#>
    [ApiResponse(HttpStatusCode.NotFound, "La ressource <#= codeClass.Name #> spécifiée est introuvable.")]
<#
                }
			} // end if
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= deleteByIdClassName #> : IReturnVoid
	{
        /// <summary>
        /// <#= string.Format(idPropDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(idPropDescription, codeClass.Name) #>", DataType = <#= swagDataType #>, IsRequired = true, ParameterType = SwaggerParamTypes.Path)]
<#
                }
#>
        public <#= tkey #> Id { get; set; }
	}
<#
				manager.EndBlock(); // end newfile
            }

			bool patchByIdExcluded = PatchByIdClassFilterExclude != null && PatchByIdClassFilterExclude.IsMatch(codeClass.Name);
			if (!patchByIdExcluded)
            {
                string patchClassNameFormat = "Patch{0}";
				string patchClassName = string.Format(patchClassNameFormat, codeClass.Name);
				var patchClassDescription = "Modifie partiellement une ressource {0} à partir de son Id.";
                var idPropDescription = "Id de la ressource {0} à modifier.";
                var fieldsPropDescription = "Liste des modifications.";
				
				manager.StartNewFile(patchClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(patchClassDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
            if (AddRouteAttributes)     
            {
#>
	[Route("/<#= strRoute #>/{Id}", HttpVerbs.Patch, Summary = "<#= string.Format(patchClassDescription, codeClass.Name) #>")]
<#
			    if (AddApiAttributes)
                {
#>
    [ApiResponse(HttpStatusCode.BadRequest, "La ressource <#= codeClass.Name #> ne contient pas tous les champs demandés.")]
    [ApiResponse(HttpStatusCode.NotFound, "La ressource <#= codeClass.Name #> spécifiée est introuvable.")]
<#
                }
			} // end if
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= patchClassName #> : IReturnVoid
	{
        /// <summary>
        /// <#= string.Format(idPropDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(idPropDescription, codeClass.Name) #>", DataType = <#= swagDataType #>, IsRequired = true, ParameterType = SwaggerParamTypes.Path)]
<#
                }
#>
        public <#= tkey #> Id { get; set; }

        /// <summary>
        /// 
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(fieldsPropDescription, codeClass.Name) #>", DataType = "Array[" + nameof(Patch) + "]", IsRequired = true, ParameterType = SwaggerParamTypes.Form)]
<#
                }
#>
        public Patch[] Fields { get; set; }
    }
<#

				manager.EndBlock(); // end newfile
            }
			
        } // end if

		if (allInterfaces.Any(i => i.FullName == "Tmpi.Pyrene.Services.ServiceModel.Types.IEntity"))
        {
			bool autocompleteExcluded = AutocompleteClassFilterExclude != null && AutocompleteClassFilterExclude.IsMatch(codeClass.Name);
			if (!autocompleteExcluded)
            {
				var autocompleteClassName = "Autocomplete" + codeClass.Name;
				var autocompleteDescription = "Retourne des prédictions sur les ressources {0}.";
                var textPropDescription = "Texte à rechercher.";
                var maxPropDescription = "Nombre maximum de prédictions à retourner.";

				manager.StartNewFile(autocompleteClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(autocompleteDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRouteAttributes)
            {
#>
	[Route("/<#= strRoute #>/Autocomplete/{Text}", HttpVerbs.Get, Summary = "<#= string.Format(autocompleteDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= autocompleteClassName #> : IReturn<BasicEntity[]>
	{
        /// <summary>
        /// <#= textPropDescription #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(textPropDescription, codeClass.Name) #>", DataType = SwaggerDataTypes.String, IsRequired = true, ParameterType = SwaggerParamTypes.Path)]
<#
                }
#>
        public string Text { get; set; }

        /// <summary>
        /// <#= maxPropDescription #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(maxPropDescription, codeClass.Name) #>", DataType = SwaggerDataTypes.Int)]
<#
                }
#>
        public int Max { get; set; }
	}
<#
				manager.EndBlock(); // end newfile
            } // end if

			bool findExcluded = FindClassFilterExclude != null && FindClassFilterExclude.IsMatch(codeClass.Name);
			if (!findExcluded)
            {
				var findClassName = "Find" + codeClass.Name;
				var findDescription = "Retourne un ensemble de ressources {0}.";
                var textPropDescription = "Texte à rechercher.";
                var maxPropDescription = "Nombre maximum d'éléments à retourner.";

				manager.StartNewFile(findClassName + ".generated.cs");
#>
	/// <summary>
	/// <#= string.Format(findDescription, "<see cref=\"" + codeClass.Name + "\" />") #>
	/// </summary>
<#
			if (AddRouteAttributes)
            {
#>
	[Route("/<#= strRoute #>", HttpVerbs.Get, Summary = "<#= string.Format(findDescription, codeClass.Name) #>")]
<#
			} // end if
#>
	public <#= MakeClassesPartial ? "partial " : "" #>class <#= findClassName #> : IReturn<BasicEntity[]>
	{
        /// <summary>
        /// <#= textPropDescription #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(textPropDescription, codeClass.Name) #>", DataType = SwaggerDataTypes.Int)]
<#
                }
#>
        public int Skip { get; set; }

        /// <summary>
        /// <#= maxPropDescription #>
        /// </summary>
<#
			    if (AddApiAttributes)
                {
#>
        [ApiMember(Description = "<#= string.Format(maxPropDescription, codeClass.Name) #>", DataType = SwaggerDataTypes.Int)]
<#
                }
#>
        public int Take { get; set; }

        public string Sort { get; set; }
	}
<#
				manager.EndBlock(); // end newfile
            } // end if
		} // end if
    } // end foreach

	manager.StartFooter();
#>
}
<#
	manager.EndBlock(); // end footer

	manager.Process(SplitIntoMultipleFiles);
#>
<#+ 
CodeProperty GetPrimaryKeyColumn(CodeClass tableClass)
{
	IEnumerable<CodeInterface> allInterfaces = VisualStudioHelper.CodeModel.GetAllImplementedInterfaces(tableClass);
	bool implIHasId = allInterfaces.Any(i => i.FullName.StartsWith("ServiceStack.Model.IHasId<") ||
		i.FullName == "ServiceStack.Model.IHasIntId");
	if (implIHasId)
    {
		CodeProperty prop = VisualStudioHelper.CodeModel.GetProperty(tableClass, "Id");
		return prop;
	}
	else
	{
		var dic = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(tableClass);
		var q = from kvp in dic
			from attr in kvp.Value
			where attr.FullName == "ServiceStack.DataAnnotations.PrimaryKeyAttribute"
			select kvp.Key;
		CodeProperty prop = q.FirstOrDefault();
		return prop;
    }
}
List<CodeProperty> GetBestUniqueColumns(CodeClass tableClass, bool usePK)
{
/*	var dic = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(tableClass);
	var q = from kvp in dic
		from attr in kvp.Value
		where attr.FullName == "ServiceStack.DataAnnotations.IndexAttribute"
		let attrProps = attr.Value.Split(',')
		where attrProps.FirstOrDefault() == "true"
		select new
		{
			PropertyName = kvp.Key.Name,
			IndexAttribute = attr
        };
	var idxAttrs = q.ToList();
	var q2 = from idx in idxAttrs
			where idx.Value.Split(',')
	List<CodeElement> classAttr = VisualStudioHelper.CodeModel.GetAllCodeElementsOfType(tableClass.Attributes, vsCMElement.vsCMElementAttribute, false)
		.OfType<CodeAttribute>()
		.ToList();

	
	List<CodeProperty> pkCols = null;

	if (table.PrimaryKey != null)
    {
		pkCols = table.PrimaryKey.PKeyColumns;
    }

	if (usePK)
    {
		return pkCols;
    }
	else 
    {
		TableIndex index = table.Indices.Where(idx => idx.IsUnique)
			.OrderBy(idx => idx.IndexColumns.Count)
			.FirstOrDefault();
		if (index != null)
		{
			return index.IndexColumns;
		}
    }

    return pkCols;*/
	return null;
}

/// <summary>
/// Extraction du route path suivant les ForeignKeys/enfants
/// Exemple : classe GenFournContact passe de '/GenFournContact/' en '/GenFourn/{xxx}/Contact/'
/// </summary>
List<string> GetRoutePathFromClass(CodeClass tableClass, IEnumerable<CodeClass> lstClasses)
{
    List<string> lstRoute = new List<string>();
    List<string> parts = new List<string>();
	/*
	var allAttributes = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(tableClass).SelectMany(x => x.Value);
	var fkAttributes = allAttributes.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.ReferencesAttribute" || 
		attr.FullName == "ServiceStack.DataAnnotations.ForeignKeyAttribute").ToList();
	*/

	/*var dicPropAttr = VisualStudioHelper.CodeModel.GetAllPropertiesAttributes(tableClass);
	List<CodeAttribute> fkAttributes = dicPropAttr.Values
		.Where(attr => attr.FullName == "ServiceStack.DataAnnotations.ReferencesAttribute" || attr.FullName == "ServiceStack.DataAnnotations.ForeignKeyAttribute")
		.ToList();
	if (fkAttributes.Any())
	{
		var refClassNames = fkAttributes.SelectMany(fk => fk.Value.Split(',')).Select(s => s.Trim())
			.Where(s => s.StartsWith("typeof(") && s.EndsWith(")"))
			.Select(s => s.Remove(s.Length-1, 1).Remove(0, 7).Trim()) // nettoyage
			.Where(s => tableClass.Name.StartsWith(s))
			.ToList();

		string refClassName = refClassNames.OrderByDescending(s => s.Length).FirstOrDefault();
		if (!string.IsNullOrEmpty(refClassName))
		{
			CodeClass parentTableClass = lstClasses.SingleOrDefault(c => c.Name == refClassName);
			if (parentTableClass != null)
			{
				str = tableClass.Name.Replace(parentTableClass.Name, "");
				lstRoute = GetRoutePathFromClass(parentTableClass);
			}
		}
	}
    if (!parts.Any())
    {
		string newTableName = tableClass.Name.Remove(0, 3);
        parts.Add(newTableName);
    }

	lstRoute.AddRange(parts);*/
	return lstRoute;
}
#>